ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"resonator.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN6stmlib11InterpolateEPKfff,"axG",%progbits,_ZN6stmlib11InterpolateEPKfff,comdat
  17              		.align	1
  18              		.weak	_ZN6stmlib11InterpolateEPKfff
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	_ZN6stmlib11InterpolateEPKfff:
  26              	.LVL0:
  27              	.LFB1465:
  28              		.file 1 "../../stmlib/dsp/dsp.h"
   1:../../stmlib/dsp/dsp.h **** // Copyright 2012 Emilie Gillet.
   2:../../stmlib/dsp/dsp.h **** //
   3:../../stmlib/dsp/dsp.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:../../stmlib/dsp/dsp.h **** //
   5:../../stmlib/dsp/dsp.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:../../stmlib/dsp/dsp.h **** // of this software and associated documentation files (the "Software"), to deal
   7:../../stmlib/dsp/dsp.h **** // in the Software without restriction, including without limitation the rights
   8:../../stmlib/dsp/dsp.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:../../stmlib/dsp/dsp.h **** // copies of the Software, and to permit persons to whom the Software is
  10:../../stmlib/dsp/dsp.h **** // furnished to do so, subject to the following conditions:
  11:../../stmlib/dsp/dsp.h **** // 
  12:../../stmlib/dsp/dsp.h **** // The above copyright notice and this permission notice shall be included in
  13:../../stmlib/dsp/dsp.h **** // all copies or substantial portions of the Software.
  14:../../stmlib/dsp/dsp.h **** // 
  15:../../stmlib/dsp/dsp.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../stmlib/dsp/dsp.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:../../stmlib/dsp/dsp.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:../../stmlib/dsp/dsp.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:../../stmlib/dsp/dsp.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:../../stmlib/dsp/dsp.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:../../stmlib/dsp/dsp.h **** // THE SOFTWARE.
  22:../../stmlib/dsp/dsp.h **** // 
  23:../../stmlib/dsp/dsp.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:../../stmlib/dsp/dsp.h **** //
  25:../../stmlib/dsp/dsp.h **** // -----------------------------------------------------------------------------
  26:../../stmlib/dsp/dsp.h **** //
  27:../../stmlib/dsp/dsp.h **** // DSP utility routines.
  28:../../stmlib/dsp/dsp.h **** 
  29:../../stmlib/dsp/dsp.h **** #ifndef STMLIB_UTILS_DSP_DSP_H_
  30:../../stmlib/dsp/dsp.h **** #define STMLIB_UTILS_DSP_DSP_H_
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 2


  31:../../stmlib/dsp/dsp.h **** 
  32:../../stmlib/dsp/dsp.h **** #include "stmlib/stmlib.h"
  33:../../stmlib/dsp/dsp.h **** 
  34:../../stmlib/dsp/dsp.h **** #include <cmath>
  35:../../stmlib/dsp/dsp.h **** #include <math.h>
  36:../../stmlib/dsp/dsp.h **** 
  37:../../stmlib/dsp/dsp.h **** namespace stmlib {
  38:../../stmlib/dsp/dsp.h **** 
  39:../../stmlib/dsp/dsp.h **** #define MAKE_INTEGRAL_FRACTIONAL(x) \
  40:../../stmlib/dsp/dsp.h ****   int32_t x ## _integral = static_cast<int32_t>(x); \
  41:../../stmlib/dsp/dsp.h ****   float x ## _fractional = x - static_cast<float>(x ## _integral);
  42:../../stmlib/dsp/dsp.h **** 
  43:../../stmlib/dsp/dsp.h **** inline float Interpolate(const float* table, float index, float size) {
  29              		.loc 1 43 71 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  44:../../stmlib/dsp/dsp.h ****   index *= size;
  34              		.loc 1 44 3 view .LVU1
  35              		.loc 1 44 9 is_stmt 0 view .LVU2
  36 0000 60EE200A 		vmul.f32	s1, s0, s1
  37              	.LVL1:
  45:../../stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
  38              		.loc 1 45 3 is_stmt 1 view .LVU3
  39 0004 FDEEE07A 		vcvt.s32.f32	s15, s1
  40              	.LVL2:
  41              		.loc 1 45 3 view .LVU4
  46:../../stmlib/dsp/dsp.h ****   float a = table[index_integral];
  42              		.loc 1 46 3 view .LVU5
  43              		.loc 1 46 9 is_stmt 0 view .LVU6
  44 0008 17EE903A 		vmov	r3, s15	@ int
  45:../../stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
  45              		.loc 1 45 3 view .LVU7
  46 000c F8EEE77A 		vcvt.f32.s32	s15, s15
  47              	.LVL3:
  48              		.loc 1 46 9 view .LVU8
  49 0010 00EB8300 		add	r0, r0, r3, lsl #2
  50              	.LVL4:
  45:../../stmlib/dsp/dsp.h ****   MAKE_INTEGRAL_FRACTIONAL(index)
  51              		.loc 1 45 3 view .LVU9
  52 0014 70EEE70A 		vsub.f32	s1, s1, s15
  53              	.LVL5:
  54              		.loc 1 46 9 view .LVU10
  55 0018 90ED000A 		vldr.32	s0, [r0]
  56              	.LVL6:
  47:../../stmlib/dsp/dsp.h ****   float b = table[index_integral + 1];
  57              		.loc 1 47 3 is_stmt 1 view .LVU11
  48:../../stmlib/dsp/dsp.h ****   return a + (b - a) * index_fractional;
  58              		.loc 1 48 3 view .LVU12
  59              		.loc 1 48 17 is_stmt 0 view .LVU13
  60 001c 90ED017A 		vldr.32	s14, [r0, #4]
  61 0020 37EE407A 		vsub.f32	s14, s14, s0
  49:../../stmlib/dsp/dsp.h **** }
  62              		.loc 1 49 1 view .LVU14
  63 0024 A7EE200A 		vfma.f32	s0, s14, s1
  64              	.LVL7:
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 3


  65              		.loc 1 49 1 view .LVU15
  66 0028 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE1465:
  70              		.section	.text._ZN5torus9Resonator4InitEv,"ax",%progbits
  71              		.align	1
  72              		.global	_ZN5torus9Resonator4InitEv
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv5-d16
  78              	_ZN5torus9Resonator4InitEv:
  79              	.LVL8:
  80              	.LFB1527:
  81              		.file 2 "dsp/resonator.cpp"
   1:dsp/resonator.cpp **** // Copyright 2015 Emilie Gillet.
   2:dsp/resonator.cpp **** //
   3:dsp/resonator.cpp **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:dsp/resonator.cpp **** //
   5:dsp/resonator.cpp **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:dsp/resonator.cpp **** // of this software and associated documentation files (the "Software"), to deal
   7:dsp/resonator.cpp **** // in the Software without restriction, including without limitation the rights
   8:dsp/resonator.cpp **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:dsp/resonator.cpp **** // copies of the Software, and to permit persons to whom the Software is
  10:dsp/resonator.cpp **** // furnished to do so, subject to the following conditions:
  11:dsp/resonator.cpp **** //
  12:dsp/resonator.cpp **** // The above copyright notice and this permission notice shall be included in
  13:dsp/resonator.cpp **** // all copies or substantial portions of the Software.
  14:dsp/resonator.cpp **** //
  15:dsp/resonator.cpp **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:dsp/resonator.cpp **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:dsp/resonator.cpp **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:dsp/resonator.cpp **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:dsp/resonator.cpp **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:dsp/resonator.cpp **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:dsp/resonator.cpp **** // THE SOFTWARE.
  22:dsp/resonator.cpp **** //
  23:dsp/resonator.cpp **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:dsp/resonator.cpp **** //
  25:dsp/resonator.cpp **** // -----------------------------------------------------------------------------
  26:dsp/resonator.cpp **** //
  27:dsp/resonator.cpp **** // Resonator.
  28:dsp/resonator.cpp **** 
  29:dsp/resonator.cpp **** #include "dsp/resonator.h"
  30:dsp/resonator.cpp **** 
  31:dsp/resonator.cpp **** #include "stmlib/dsp/dsp.h"
  32:dsp/resonator.cpp **** #include "stmlib/dsp/cosine_oscillator.h"
  33:dsp/resonator.cpp **** #include "stmlib/dsp/parameter_interpolator.h"
  34:dsp/resonator.cpp **** 
  35:dsp/resonator.cpp **** #include "resources.h"
  36:dsp/resonator.cpp **** 
  37:dsp/resonator.cpp **** namespace torus
  38:dsp/resonator.cpp **** {
  39:dsp/resonator.cpp **** using namespace std;
  40:dsp/resonator.cpp **** using namespace stmlib;
  41:dsp/resonator.cpp **** 
  42:dsp/resonator.cpp **** void Resonator::Init()
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 4


  43:dsp/resonator.cpp **** {
  82              		.loc 2 43 1 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  44:dsp/resonator.cpp ****     for(int32_t i = 0; i < kMaxModes; ++i)
  87              		.loc 2 44 5 view .LVU17
  88              	.LBB66:
  89              		.loc 2 44 26 view .LVU18
  90 0000 0346     		mov	r3, r0
  91 0002 00F5A061 		add	r1, r0, #1280
  92              	.LVL9:
  93              	.L3:
  45:dsp/resonator.cpp ****     {
  46:dsp/resonator.cpp ****         f_[i].Init();
  94              		.loc 2 46 9 discriminator 2 view .LVU19
  95              	.LBB67:
  96              	.LBI67:
  97              		.file 3 "../../stmlib/dsp/filter.h"
   1:../../stmlib/dsp/filter.h **** // Copyright 2014 Emilie Gillet.
   2:../../stmlib/dsp/filter.h **** //
   3:../../stmlib/dsp/filter.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:../../stmlib/dsp/filter.h **** //
   5:../../stmlib/dsp/filter.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:../../stmlib/dsp/filter.h **** // of this software and associated documentation files (the "Software"), to deal
   7:../../stmlib/dsp/filter.h **** // in the Software without restriction, including without limitation the rights
   8:../../stmlib/dsp/filter.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:../../stmlib/dsp/filter.h **** // copies of the Software, and to permit persons to whom the Software is
  10:../../stmlib/dsp/filter.h **** // furnished to do so, subject to the following conditions:
  11:../../stmlib/dsp/filter.h **** // 
  12:../../stmlib/dsp/filter.h **** // The above copyright notice and this permission notice shall be included in
  13:../../stmlib/dsp/filter.h **** // all copies or substantial portions of the Software.
  14:../../stmlib/dsp/filter.h **** // 
  15:../../stmlib/dsp/filter.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../stmlib/dsp/filter.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:../../stmlib/dsp/filter.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:../../stmlib/dsp/filter.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:../../stmlib/dsp/filter.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:../../stmlib/dsp/filter.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:../../stmlib/dsp/filter.h **** // THE SOFTWARE.
  22:../../stmlib/dsp/filter.h **** // 
  23:../../stmlib/dsp/filter.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:../../stmlib/dsp/filter.h **** //
  25:../../stmlib/dsp/filter.h **** // -----------------------------------------------------------------------------
  26:../../stmlib/dsp/filter.h **** //
  27:../../stmlib/dsp/filter.h **** // Zero-delay-feedback filters (one pole and SVF).
  28:../../stmlib/dsp/filter.h **** // Naive SVF.
  29:../../stmlib/dsp/filter.h **** 
  30:../../stmlib/dsp/filter.h **** #ifndef STMLIB_DSP_FILTER_H_
  31:../../stmlib/dsp/filter.h **** #define STMLIB_DSP_FILTER_H_
  32:../../stmlib/dsp/filter.h **** 
  33:../../stmlib/dsp/filter.h **** #include "stmlib/stmlib.h"
  34:../../stmlib/dsp/filter.h **** 
  35:../../stmlib/dsp/filter.h **** #include <cmath>
  36:../../stmlib/dsp/filter.h **** #include <algorithm>
  37:../../stmlib/dsp/filter.h **** 
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 5


  38:../../stmlib/dsp/filter.h **** namespace stmlib {
  39:../../stmlib/dsp/filter.h **** 
  40:../../stmlib/dsp/filter.h **** enum FilterMode {
  41:../../stmlib/dsp/filter.h ****   FILTER_MODE_LOW_PASS,
  42:../../stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS,
  43:../../stmlib/dsp/filter.h ****   FILTER_MODE_BAND_PASS_NORMALIZED,
  44:../../stmlib/dsp/filter.h ****   FILTER_MODE_HIGH_PASS
  45:../../stmlib/dsp/filter.h **** };
  46:../../stmlib/dsp/filter.h **** 
  47:../../stmlib/dsp/filter.h **** enum FrequencyApproximation {
  48:../../stmlib/dsp/filter.h ****   FREQUENCY_EXACT,
  49:../../stmlib/dsp/filter.h ****   FREQUENCY_ACCURATE,
  50:../../stmlib/dsp/filter.h ****   FREQUENCY_FAST,
  51:../../stmlib/dsp/filter.h ****   FREQUENCY_DIRTY
  52:../../stmlib/dsp/filter.h **** };
  53:../../stmlib/dsp/filter.h **** 
  54:../../stmlib/dsp/filter.h **** #define M_PI_F float(M_PI)
  55:../../stmlib/dsp/filter.h **** #define M_PI_POW_2 M_PI * M_PI
  56:../../stmlib/dsp/filter.h **** #define M_PI_POW_3 M_PI_POW_2 * M_PI
  57:../../stmlib/dsp/filter.h **** #define M_PI_POW_5 M_PI_POW_3 * M_PI_POW_2
  58:../../stmlib/dsp/filter.h **** #define M_PI_POW_7 M_PI_POW_5 * M_PI_POW_2
  59:../../stmlib/dsp/filter.h **** #define M_PI_POW_9 M_PI_POW_7 * M_PI_POW_2
  60:../../stmlib/dsp/filter.h **** #define M_PI_POW_11 M_PI_POW_9 * M_PI_POW_2
  61:../../stmlib/dsp/filter.h **** 
  62:../../stmlib/dsp/filter.h **** class DCBlocker {
  63:../../stmlib/dsp/filter.h ****  public:
  64:../../stmlib/dsp/filter.h ****   DCBlocker() { }
  65:../../stmlib/dsp/filter.h ****   ~DCBlocker() { }
  66:../../stmlib/dsp/filter.h ****   
  67:../../stmlib/dsp/filter.h ****   void Init(float pole) {
  68:../../stmlib/dsp/filter.h ****     x_ = 0.0f;
  69:../../stmlib/dsp/filter.h ****     y_ = 0.0f;
  70:../../stmlib/dsp/filter.h ****     pole_ = pole;
  71:../../stmlib/dsp/filter.h ****   }
  72:../../stmlib/dsp/filter.h ****   
  73:../../stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
  74:../../stmlib/dsp/filter.h ****     float x = x_;
  75:../../stmlib/dsp/filter.h ****     float y = y_;
  76:../../stmlib/dsp/filter.h ****     const float pole = pole_;
  77:../../stmlib/dsp/filter.h ****     while (size--) {
  78:../../stmlib/dsp/filter.h ****       float old_x = x;
  79:../../stmlib/dsp/filter.h ****       x = *in_out;
  80:../../stmlib/dsp/filter.h ****       *in_out++ = y = y * pole + x - old_x;
  81:../../stmlib/dsp/filter.h ****     }
  82:../../stmlib/dsp/filter.h ****     x_ = x;
  83:../../stmlib/dsp/filter.h ****     y_ = y;
  84:../../stmlib/dsp/filter.h ****   }
  85:../../stmlib/dsp/filter.h ****   
  86:../../stmlib/dsp/filter.h ****  private:
  87:../../stmlib/dsp/filter.h ****   float pole_;
  88:../../stmlib/dsp/filter.h ****   float x_;
  89:../../stmlib/dsp/filter.h ****   float y_;
  90:../../stmlib/dsp/filter.h **** };
  91:../../stmlib/dsp/filter.h **** 
  92:../../stmlib/dsp/filter.h **** class OnePole {
  93:../../stmlib/dsp/filter.h ****  public:
  94:../../stmlib/dsp/filter.h ****   OnePole() { }
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 6


  95:../../stmlib/dsp/filter.h ****   ~OnePole() { }
  96:../../stmlib/dsp/filter.h ****   
  97:../../stmlib/dsp/filter.h ****   void Init() {
  98:../../stmlib/dsp/filter.h ****     set_f<FREQUENCY_DIRTY>(0.01f);
  99:../../stmlib/dsp/filter.h ****     Reset();
 100:../../stmlib/dsp/filter.h ****   }
 101:../../stmlib/dsp/filter.h ****   
 102:../../stmlib/dsp/filter.h ****   void Reset() {
 103:../../stmlib/dsp/filter.h ****     state_ = 0.0f;
 104:../../stmlib/dsp/filter.h ****   }
 105:../../stmlib/dsp/filter.h ****   
 106:../../stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 107:../../stmlib/dsp/filter.h ****   static inline float tan(float f) {
 108:../../stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 109:../../stmlib/dsp/filter.h ****       // Clip coefficient to about 100.
 110:../../stmlib/dsp/filter.h ****       f = f < 0.497f ? f : 0.497f;
 111:../../stmlib/dsp/filter.h ****       return tanf(M_PI * f);
 112:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_DIRTY) {
 113:../../stmlib/dsp/filter.h ****       // Optimized for frequencies below 8kHz.
 114:../../stmlib/dsp/filter.h ****       const float a = 3.736e-01 * M_PI_POW_3;
 115:../../stmlib/dsp/filter.h ****       return f * (M_PI_F + a * f * f);
 116:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_FAST) {
 117:../../stmlib/dsp/filter.h ****       // The usual tangent approximation uses 3.1755e-01 and 2.033e-01, but
 118:../../stmlib/dsp/filter.h ****       // the coefficients used here are optimized to minimize error for the
 119:../../stmlib/dsp/filter.h ****       // 16Hz to 16kHz range, with a sample rate of 48kHz.
 120:../../stmlib/dsp/filter.h ****       const float a = 3.260e-01 * M_PI_POW_3;
 121:../../stmlib/dsp/filter.h ****       const float b = 1.823e-01 * M_PI_POW_5;
 122:../../stmlib/dsp/filter.h ****       float f2 = f * f;
 123:../../stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 124:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 125:../../stmlib/dsp/filter.h ****       // These coefficients don't need to be tweaked for the audio range.
 126:../../stmlib/dsp/filter.h ****       const float a = 3.333314036e-01 * M_PI_POW_3;
 127:../../stmlib/dsp/filter.h ****       const float b = 1.333923995e-01 * M_PI_POW_5;
 128:../../stmlib/dsp/filter.h ****       const float c = 5.33740603e-02 * M_PI_POW_7;
 129:../../stmlib/dsp/filter.h ****       const float d = 2.900525e-03 * M_PI_POW_9;
 130:../../stmlib/dsp/filter.h ****       const float e = 9.5168091e-03 * M_PI_POW_11;
 131:../../stmlib/dsp/filter.h ****       float f2 = f * f;
 132:../../stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + f2 * (b + f2 * (c + f2 * (d + f2 * e)))));
 133:../../stmlib/dsp/filter.h ****     }
 134:../../stmlib/dsp/filter.h ****   }
 135:../../stmlib/dsp/filter.h ****   
 136:../../stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 137:../../stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 138:../../stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 139:../../stmlib/dsp/filter.h ****   inline void set_f(float f) {
 140:../../stmlib/dsp/filter.h ****     g_ = tan<approximation>(f);
 141:../../stmlib/dsp/filter.h ****     gi_ = 1.0f / (1.0f + g_);
 142:../../stmlib/dsp/filter.h ****   }
 143:../../stmlib/dsp/filter.h ****   
 144:../../stmlib/dsp/filter.h ****   template<FilterMode mode>
 145:../../stmlib/dsp/filter.h ****   inline float Process(float in) {
 146:../../stmlib/dsp/filter.h ****     float lp;
 147:../../stmlib/dsp/filter.h ****     lp = (g_ * in + state_) * gi_;
 148:../../stmlib/dsp/filter.h ****     state_ = g_ * (in - lp) + lp;
 149:../../stmlib/dsp/filter.h **** 
 150:../../stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 151:../../stmlib/dsp/filter.h ****       return lp;
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 7


 152:../../stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 153:../../stmlib/dsp/filter.h ****       return in - lp;
 154:../../stmlib/dsp/filter.h ****     } else {
 155:../../stmlib/dsp/filter.h ****       return 0.0f;
 156:../../stmlib/dsp/filter.h ****     }
 157:../../stmlib/dsp/filter.h ****   }
 158:../../stmlib/dsp/filter.h ****   
 159:../../stmlib/dsp/filter.h ****   template<FilterMode mode>
 160:../../stmlib/dsp/filter.h ****   inline void Process(float* in_out, size_t size) {
 161:../../stmlib/dsp/filter.h ****     while (size--) {
 162:../../stmlib/dsp/filter.h ****       *in_out = Process<mode>(*in_out);
 163:../../stmlib/dsp/filter.h ****       ++in_out;
 164:../../stmlib/dsp/filter.h ****     }
 165:../../stmlib/dsp/filter.h ****   }
 166:../../stmlib/dsp/filter.h ****   
 167:../../stmlib/dsp/filter.h ****  private:
 168:../../stmlib/dsp/filter.h ****   float g_;
 169:../../stmlib/dsp/filter.h ****   float gi_;
 170:../../stmlib/dsp/filter.h ****   float state_;
 171:../../stmlib/dsp/filter.h ****   
 172:../../stmlib/dsp/filter.h ****   DISALLOW_COPY_AND_ASSIGN(OnePole);
 173:../../stmlib/dsp/filter.h **** };
 174:../../stmlib/dsp/filter.h **** 
 175:../../stmlib/dsp/filter.h **** 
 176:../../stmlib/dsp/filter.h **** 
 177:../../stmlib/dsp/filter.h **** class Svf {
 178:../../stmlib/dsp/filter.h ****  public:
 179:../../stmlib/dsp/filter.h ****   Svf() { }
 180:../../stmlib/dsp/filter.h ****   ~Svf() { }
 181:../../stmlib/dsp/filter.h ****   
 182:../../stmlib/dsp/filter.h ****   void Init() {
  98              		.loc 3 182 8 discriminator 2 view .LVU20
  99              	.LBE67:
 100              	.LBE66:
 183:../../stmlib/dsp/filter.h ****     set_f_q<FREQUENCY_DIRTY>(0.01f, 100.0f);
 101              		.loc 3 183 5 discriminator 2 view .LVU21
 102              	.LBB77:
 103              	.LBB74:
 104              	.LBB68:
 105              	.LBI68:
 184:../../stmlib/dsp/filter.h ****     Reset();
 185:../../stmlib/dsp/filter.h ****   }
 186:../../stmlib/dsp/filter.h ****   
 187:../../stmlib/dsp/filter.h ****   void Reset() {
 188:../../stmlib/dsp/filter.h ****     state_1_ = state_2_ = 0.0f;
 189:../../stmlib/dsp/filter.h ****   }
 190:../../stmlib/dsp/filter.h ****   
 191:../../stmlib/dsp/filter.h ****   // Copy settings from another filter.
 192:../../stmlib/dsp/filter.h ****   inline void set(const Svf& f) {
 193:../../stmlib/dsp/filter.h ****     g_ = f.g();
 194:../../stmlib/dsp/filter.h ****     r_ = f.r();
 195:../../stmlib/dsp/filter.h ****     h_ = f.h();
 196:../../stmlib/dsp/filter.h ****   }
 197:../../stmlib/dsp/filter.h **** 
 198:../../stmlib/dsp/filter.h ****   // Set all parameters from LUT.
 199:../../stmlib/dsp/filter.h ****   inline void set_g_r_h(float g, float r, float h) {
 200:../../stmlib/dsp/filter.h ****     g_ = g;
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 8


 201:../../stmlib/dsp/filter.h ****     r_ = r;
 202:../../stmlib/dsp/filter.h ****     h_ = h;
 203:../../stmlib/dsp/filter.h ****   }
 204:../../stmlib/dsp/filter.h ****   
 205:../../stmlib/dsp/filter.h ****   // Set frequency and resonance coefficients from LUT, adjust remaining
 206:../../stmlib/dsp/filter.h ****   // parameter.
 207:../../stmlib/dsp/filter.h ****   inline void set_g_r(float g, float r) {
 208:../../stmlib/dsp/filter.h ****     g_ = g;
 209:../../stmlib/dsp/filter.h ****     r_ = r;
 210:../../stmlib/dsp/filter.h ****     h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
 211:../../stmlib/dsp/filter.h ****   }
 212:../../stmlib/dsp/filter.h **** 
 213:../../stmlib/dsp/filter.h ****   // Set frequency from LUT, resonance in true units, adjust the rest.
 214:../../stmlib/dsp/filter.h ****   inline void set_g_q(float g, float resonance) {
 215:../../stmlib/dsp/filter.h ****     g_ = g;
 216:../../stmlib/dsp/filter.h ****     r_ = 1.0f / resonance;
 217:../../stmlib/dsp/filter.h ****     h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
 218:../../stmlib/dsp/filter.h ****   }
 219:../../stmlib/dsp/filter.h **** 
 220:../../stmlib/dsp/filter.h ****   // Set frequency and resonance from true units. Various approximations
 221:../../stmlib/dsp/filter.h ****   // are available to avoid the cost of tanf.
 222:../../stmlib/dsp/filter.h ****   template<FrequencyApproximation approximation>
 223:../../stmlib/dsp/filter.h ****   inline void set_f_q(float f, float resonance) {
 106              		.loc 3 223 15 discriminator 2 view .LVU22
 107              	.LBB69:
 224:../../stmlib/dsp/filter.h ****     g_ = OnePole::tan<approximation>(f);
 108              		.loc 3 224 8 is_stmt 0 discriminator 2 view .LVU23
 109 0006 0E4A     		ldr	r2, .L5
 110              	.LBE69:
 111              	.LBE68:
 112              	.LBE74:
  44:dsp/resonator.cpp ****     {
 113              		.loc 2 44 26 discriminator 2 view .LVU24
 114 0008 1433     		adds	r3, r3, #20
 115              	.LBB75:
 116              	.LBB71:
 117              	.LBB70:
 118              		.loc 3 224 8 discriminator 2 view .LVU25
 119 000a 9A60     		str	r2, [r3, #8]	@ float
 225:../../stmlib/dsp/filter.h ****     r_ = 1.0f / resonance;
 120              		.loc 3 225 8 discriminator 2 view .LVU26
 121 000c 0D4A     		ldr	r2, .L5+4
 122 000e DA60     		str	r2, [r3, #12]	@ float
 226:../../stmlib/dsp/filter.h ****     h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
 123              		.loc 3 226 8 discriminator 2 view .LVU27
 124 0010 0D4A     		ldr	r2, .L5+8
 125 0012 1A61     		str	r2, [r3, #16]	@ float
 126              	.LVL10:
 127              		.loc 3 226 8 discriminator 2 view .LVU28
 128              	.LBE70:
 129              	.LBE71:
 130              	.LBE75:
 131              	.LBE77:
 184:../../stmlib/dsp/filter.h ****   }
 132              		.loc 3 184 5 is_stmt 1 discriminator 2 view .LVU29
 133              	.LBB78:
 134              	.LBB76:
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 9


 135              	.LBB72:
 136              	.LBI72:
 187:../../stmlib/dsp/filter.h ****     state_1_ = state_2_ = 0.0f;
 137              		.loc 3 187 8 discriminator 2 view .LVU30
 138              	.LBB73:
 188:../../stmlib/dsp/filter.h ****   }
 139              		.loc 3 188 5 discriminator 2 view .LVU31
 188:../../stmlib/dsp/filter.h ****   }
 140              		.loc 3 188 25 is_stmt 0 discriminator 2 view .LVU32
 141 0014 0022     		movs	r2, #0
 142 0016 9A61     		str	r2, [r3, #24]	@ float
 188:../../stmlib/dsp/filter.h ****   }
 143              		.loc 3 188 14 discriminator 2 view .LVU33
 144 0018 5A61     		str	r2, [r3, #20]	@ float
 188:../../stmlib/dsp/filter.h ****   }
 145              		.loc 3 188 14 discriminator 2 view .LVU34
 146              	.LBE73:
 147              	.LBE72:
 148              	.LBE76:
  44:dsp/resonator.cpp ****     {
 149              		.loc 2 44 5 is_stmt 1 discriminator 2 view .LVU35
  44:dsp/resonator.cpp ****     {
 150              		.loc 2 44 26 discriminator 2 view .LVU36
 151 001a 9942     		cmp	r1, r3
 152 001c F3D1     		bne	.L3
 153              	.LBE78:
  47:dsp/resonator.cpp ****     }
  48:dsp/resonator.cpp **** 
  49:dsp/resonator.cpp ****     set_frequency(220.0f / kSampleRate);
 154              		.loc 2 49 5 view .LVU37
 155              	.LVL11:
 156              	.LBB79:
 157              	.LBI79:
 158              		.file 4 "./dsp/resonator.h"
   1:./dsp/resonator.h **** // Copyright 2015 Emilie Gillet.
   2:./dsp/resonator.h **** //
   3:./dsp/resonator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:./dsp/resonator.h **** //
   5:./dsp/resonator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:./dsp/resonator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:./dsp/resonator.h **** // in the Software without restriction, including without limitation the rights
   8:./dsp/resonator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:./dsp/resonator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:./dsp/resonator.h **** // furnished to do so, subject to the following conditions:
  11:./dsp/resonator.h **** //
  12:./dsp/resonator.h **** // The above copyright notice and this permission notice shall be included in
  13:./dsp/resonator.h **** // all copies or substantial portions of the Software.
  14:./dsp/resonator.h **** //
  15:./dsp/resonator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./dsp/resonator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:./dsp/resonator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:./dsp/resonator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:./dsp/resonator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:./dsp/resonator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:./dsp/resonator.h **** // THE SOFTWARE.
  22:./dsp/resonator.h **** //
  23:./dsp/resonator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 10


  24:./dsp/resonator.h **** //
  25:./dsp/resonator.h **** // -----------------------------------------------------------------------------
  26:./dsp/resonator.h **** //
  27:./dsp/resonator.h **** // Resonator.
  28:./dsp/resonator.h **** 
  29:./dsp/resonator.h **** #ifndef TORUS_DSP_RESONATOR_H_
  30:./dsp/resonator.h **** #define TORUS_DSP_RESONATOR_H_
  31:./dsp/resonator.h **** 
  32:./dsp/resonator.h **** #include "stmlib/stmlib.h"
  33:./dsp/resonator.h **** 
  34:./dsp/resonator.h **** #include <algorithm>
  35:./dsp/resonator.h **** 
  36:./dsp/resonator.h **** #include "dsp/dsp.h"
  37:./dsp/resonator.h **** #include "stmlib/dsp/filter.h"
  38:./dsp/resonator.h **** #include "stmlib/dsp/delay_line.h"
  39:./dsp/resonator.h **** 
  40:./dsp/resonator.h **** namespace torus
  41:./dsp/resonator.h **** {
  42:./dsp/resonator.h **** const int32_t kMaxModes = 64;
  43:./dsp/resonator.h **** 
  44:./dsp/resonator.h **** class Resonator
  45:./dsp/resonator.h **** {
  46:./dsp/resonator.h ****   public:
  47:./dsp/resonator.h ****     Resonator() {}
  48:./dsp/resonator.h ****     ~Resonator() {}
  49:./dsp/resonator.h **** 
  50:./dsp/resonator.h ****     void Init();
  51:./dsp/resonator.h ****     void Process(const float* in, float* out, float* aux, size_t size);
  52:./dsp/resonator.h **** 
  53:./dsp/resonator.h ****     inline void set_frequency(float frequency) { frequency_ = frequency; }
 159              		.loc 4 53 17 view .LVU38
 160              	.LBB80:
 161              		.loc 4 53 50 view .LVU39
 162              		.loc 4 53 61 is_stmt 0 view .LVU40
 163 001e 0B4B     		ldr	r3, .L5+12
 164              	.LBE80:
 165              	.LBE79:
  50:dsp/resonator.cpp ****     set_structure(0.25f);
  51:dsp/resonator.cpp ****     set_brightness(0.5f);
  52:dsp/resonator.cpp ****     set_damping(0.3f);
  53:dsp/resonator.cpp ****     set_position(0.999f);
  54:dsp/resonator.cpp ****     previous_position_ = 0.0f;
 166              		.loc 2 54 24 view .LVU41
 167 0020 0261     		str	r2, [r0, #16]	@ float
 168              	.LBB82:
 169              	.LBB81:
 170              		.loc 4 53 61 view .LVU42
 171 0022 0360     		str	r3, [r0]	@ float
 172              	.LVL12:
 173              		.loc 4 53 61 view .LVU43
 174              	.LBE81:
 175              	.LBE82:
  50:dsp/resonator.cpp ****     set_structure(0.25f);
 176              		.loc 2 50 5 is_stmt 1 view .LVU44
 177              	.LBB83:
 178              	.LBI83:
  54:./dsp/resonator.h **** 
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 11


  55:./dsp/resonator.h ****     inline void set_structure(float structure) { structure_ = structure; }
 179              		.loc 4 55 17 view .LVU45
 180              	.LBB84:
 181              		.loc 4 55 50 view .LVU46
 182              		.loc 4 55 61 is_stmt 0 view .LVU47
 183 0024 4FF07A53 		mov	r3, #1048576000
 184 0028 4360     		str	r3, [r0, #4]	@ float
 185              	.LVL13:
 186              		.loc 4 55 61 view .LVU48
 187              	.LBE84:
 188              	.LBE83:
  51:dsp/resonator.cpp ****     set_damping(0.3f);
 189              		.loc 2 51 5 is_stmt 1 view .LVU49
 190              	.LBB85:
 191              	.LBI85:
  56:./dsp/resonator.h **** 
  57:./dsp/resonator.h ****     inline void set_brightness(float brightness) { brightness_ = brightness; }
 192              		.loc 4 57 17 view .LVU50
 193              	.LBB86:
 194              		.loc 4 57 52 view .LVU51
 195              		.loc 4 57 64 is_stmt 0 view .LVU52
 196 002a 4FF07C53 		mov	r3, #1056964608
 197 002e 8360     		str	r3, [r0, #8]	@ float
 198              	.LVL14:
 199              		.loc 4 57 64 view .LVU53
 200              	.LBE86:
 201              	.LBE85:
  52:dsp/resonator.cpp ****     set_position(0.999f);
 202              		.loc 2 52 5 is_stmt 1 view .LVU54
 203              	.LBB87:
 204              	.LBI87:
  58:./dsp/resonator.h **** 
  59:./dsp/resonator.h ****     inline void set_damping(float damping) { damping_ = damping; }
 205              		.loc 4 59 17 view .LVU55
 206              	.LBB88:
 207              		.loc 4 59 46 view .LVU56
 208              		.loc 4 59 55 is_stmt 0 view .LVU57
 209 0030 074B     		ldr	r3, .L5+16
 210 0032 4361     		str	r3, [r0, #20]	@ float
 211              	.LVL15:
 212              		.loc 4 59 55 view .LVU58
 213              	.LBE88:
 214              	.LBE87:
  53:dsp/resonator.cpp ****     previous_position_ = 0.0f;
 215              		.loc 2 53 5 is_stmt 1 view .LVU59
 216              	.LBB89:
 217              	.LBI89:
  60:./dsp/resonator.h **** 
  61:./dsp/resonator.h ****     inline void set_position(float position) { position_ = position; }
 218              		.loc 4 61 17 view .LVU60
 219              	.LBB90:
 220              		.loc 4 61 48 view .LVU61
 221              		.loc 4 61 58 is_stmt 0 view .LVU62
 222 0034 074B     		ldr	r3, .L5+20
 223 0036 C360     		str	r3, [r0, #12]	@ float
 224              	.LVL16:
 225              		.loc 4 61 58 view .LVU63
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 12


 226              	.LBE90:
 227              	.LBE89:
 228              		.loc 2 54 5 is_stmt 1 view .LVU64
  55:dsp/resonator.cpp ****     set_resolution(kMaxModes);
 229              		.loc 2 55 5 view .LVU65
 230              	.LBB91:
 231              	.LBI91:
  62:./dsp/resonator.h **** 
  63:./dsp/resonator.h ****     inline void set_resolution(int32_t resolution)
 232              		.loc 4 63 17 view .LVU66
 233              	.LBB92:
  64:./dsp/resonator.h ****     {
  65:./dsp/resonator.h ****         resolution -= resolution & 1; // Must be even!
 234              		.loc 4 65 9 view .LVU67
  66:./dsp/resonator.h ****         resolution_ = std::min(resolution, kMaxModes);
 235              		.loc 4 66 9 view .LVU68
 236              		.loc 4 66 21 is_stmt 0 view .LVU69
 237 0038 4023     		movs	r3, #64
 238 003a 8361     		str	r3, [r0, #24]
 239              	.LVL17:
 240              		.loc 4 66 21 view .LVU70
 241              	.LBE92:
 242              	.LBE91:
  56:dsp/resonator.cpp **** }
 243              		.loc 2 56 1 view .LVU71
 244 003c 7047     		bx	lr
 245              	.L6:
 246 003e 00BF     		.align	2
 247              	.L5:
 248 0040 22BA003D 		.word	1023457826
 249 0044 0AD7233C 		.word	1008981770
 250 0048 CAAA7F3F 		.word	1065331402
 251 004c C92F963B 		.word	999698377
 252 0050 9A99993E 		.word	1050253722
 253 0054 77BE7F3F 		.word	1065336439
 254              		.cfi_endproc
 255              	.LFE1527:
 257              		.section	.text._ZN5torus9Resonator14ComputeFiltersEv,"ax",%progbits
 258              		.align	1
 259              		.global	_ZN5torus9Resonator14ComputeFiltersEv
 260              		.syntax unified
 261              		.thumb
 262              		.thumb_func
 263              		.fpu fpv5-d16
 265              	_ZN5torus9Resonator14ComputeFiltersEv:
 266              	.LVL18:
 267              	.LFB1528:
  57:dsp/resonator.cpp **** 
  58:dsp/resonator.cpp **** int32_t Resonator::ComputeFilters()
  59:dsp/resonator.cpp **** {
 268              		.loc 2 59 1 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
  60:dsp/resonator.cpp ****     float stiffness      = Interpolate(lut_stiffness, structure_, 256.0f);
 272              		.loc 2 60 5 view .LVU73
  59:dsp/resonator.cpp ****     float stiffness      = Interpolate(lut_stiffness, structure_, 256.0f);
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 13


 273              		.loc 2 59 1 is_stmt 0 view .LVU74
 274 0000 10B5     		push	{r4, lr}
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 4, -8
 277              		.cfi_offset 14, -4
 278 0002 2DED048B 		vpush.64	{d8, d9}
 279              		.cfi_def_cfa_offset 24
 280              		.cfi_offset 80, -24
 281              		.cfi_offset 81, -20
 282              		.cfi_offset 82, -16
 283              		.cfi_offset 83, -12
 284              		.loc 2 60 39 view .LVU75
 285 0006 D0ED018A 		vldr.32	s17, [r0, #4]
  59:dsp/resonator.cpp ****     float stiffness      = Interpolate(lut_stiffness, structure_, 256.0f);
 286              		.loc 2 59 1 view .LVU76
 287 000a 0446     		mov	r4, r0
 288              		.loc 2 60 39 view .LVU77
 289 000c DFED4A0A 		vldr.32	s1, .L19
 290 0010 4A48     		ldr	r0, .L19+4
 291              	.LVL19:
 292              		.loc 2 60 39 view .LVU78
 293 0012 B0EE680A 		vmov.f32	s0, s17
 294 0016 FFF7FEFF 		bl	_ZN6stmlib11InterpolateEPKfff
 295              	.LVL20:
  61:dsp/resonator.cpp ****     float harmonic       = frequency_;
  62:dsp/resonator.cpp ****     float stretch_factor = 1.0f;
  63:dsp/resonator.cpp ****     float q = 500.0f * Interpolate(lut_4_decades, damping_, 256.0f);
 296              		.loc 2 63 35 view .LVU79
 297 001a 4948     		ldr	r0, .L19+8
  60:dsp/resonator.cpp ****     float harmonic       = frequency_;
 298              		.loc 2 60 39 view .LVU80
 299 001c B0EE408A 		vmov.f32	s16, s0
 300              	.LVL21:
  61:dsp/resonator.cpp ****     float harmonic       = frequency_;
 301              		.loc 2 61 5 is_stmt 1 view .LVU81
 302              		.loc 2 63 35 is_stmt 0 view .LVU82
 303 0020 DFED450A 		vldr.32	s1, .L19
 304 0024 94ED050A 		vldr.32	s0, [r4, #20]
 305              	.LVL22:
 306              		.loc 2 63 35 view .LVU83
 307 0028 FFF7FEFF 		bl	_ZN6stmlib11InterpolateEPKfff
 308              	.LVL23:
  64:dsp/resonator.cpp ****     float brightness_attenuation = 1.0f - structure_;
 309              		.loc 2 64 11 view .LVU84
 310 002c F7EE006A 		vmov.f32	s13, #1.0e+0
  63:dsp/resonator.cpp ****     float brightness_attenuation = 1.0f - structure_;
 311              		.loc 2 63 67 view .LVU85
 312 0030 DFED447A 		vldr.32	s15, .L19+12
  65:dsp/resonator.cpp ****     // Reduces the range of brightness when structure is very low, to prevent
  66:dsp/resonator.cpp ****     // clipping.
  67:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
  68:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
  69:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
  70:dsp/resonator.cpp ****     float   brightness = brightness_ * (1.0f - 0.2f * brightness_attenuation);
 313              		.loc 2 70 46 view .LVU86
 314 0034 9FED446A 		vldr.32	s12, .L19+16
  63:dsp/resonator.cpp ****     float brightness_attenuation = 1.0f - structure_;
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 14


 315              		.loc 2 63 67 view .LVU87
 316 0038 20EE270A 		vmul.f32	s0, s0, s15
  71:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 317              		.loc 2 71 13 view .LVU88
 318 003c DFED435A 		vldr.32	s11, .L19+20
  64:dsp/resonator.cpp ****     // Reduces the range of brightness when structure is very low, to prevent
 319              		.loc 2 64 11 view .LVU89
 320 0040 76EEE87A 		vsub.f32	s15, s13, s17
 321 0044 A369     		ldr	r3, [r4, #24]
  70:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 322              		.loc 2 70 46 view .LVU90
 323 0046 B0EE667A 		vmov.f32	s14, s13
  61:dsp/resonator.cpp ****     float stretch_factor = 1.0f;
 324              		.loc 2 61 11 view .LVU91
 325 004a 94ED009A 		vldr.32	s18, [r4]
 326              	.LVL24:
  62:dsp/resonator.cpp ****     float q = 500.0f * Interpolate(lut_4_decades, damping_, 256.0f);
 327              		.loc 2 62 5 is_stmt 1 view .LVU92
  63:dsp/resonator.cpp ****     float brightness_attenuation = 1.0f - structure_;
 328              		.loc 2 63 5 view .LVU93
  64:dsp/resonator.cpp ****     // Reduces the range of brightness when structure is very low, to prevent
 329              		.loc 2 64 5 view .LVU94
  67:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
 330              		.loc 2 67 5 view .LVU95
 331 004e 402B     		cmp	r3, #64
  67:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
 332              		.loc 2 67 28 is_stmt 0 view .LVU96
 333 0050 67EEA77A 		vmul.f32	s15, s15, s15
 334              	.LVL25:
  68:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
 335              		.loc 2 68 5 is_stmt 1 view .LVU97
 336 0054 A8BF     		it	ge
 337 0056 4023     		movge	r3, #64
  61:dsp/resonator.cpp ****     float stretch_factor = 1.0f;
 338              		.loc 2 61 11 is_stmt 0 view .LVU98
 339 0058 B0EE495A 		vmov.f32	s10, s18
  68:dsp/resonator.cpp ****     brightness_attenuation *= brightness_attenuation;
 340              		.loc 2 68 28 view .LVU99
 341 005c 67EEA77A 		vmul.f32	s15, s15, s15
 342              	.LVL26:
  69:dsp/resonator.cpp ****     float   brightness = brightness_ * (1.0f - 0.2f * brightness_attenuation);
 343              		.loc 2 69 5 is_stmt 1 view .LVU100
  70:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 344              		.loc 2 70 5 view .LVU101
 345 0060 1A46     		mov	r2, r3
 346              	.LBB102:
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
  73:dsp/resonator.cpp ****     int32_t num_modes           = 0;
  74:dsp/resonator.cpp ****     for(int32_t i = 0; i < min(kMaxModes, resolution_); ++i)
 347              		.loc 2 74 17 is_stmt 0 view .LVU102
 348 0062 0023     		movs	r3, #0
 349              	.LBE102:
  70:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 350              		.loc 2 70 46 view .LVU103
 351 0064 67EEE77A 		vnmul.f32	s15, s15, s15
 352              	.LVL27:
  73:dsp/resonator.cpp ****     for(int32_t i = 0; i < min(kMaxModes, resolution_); ++i)
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 15


 353              		.loc 2 73 13 view .LVU104
 354 0068 1846     		mov	r0, r3
  70:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 355              		.loc 2 70 46 view .LVU105
 356 006a A7EE867A 		vfma.f32	s14, s15, s12
  70:dsp/resonator.cpp ****     float   q_loss     = brightness * (2.0f - brightness) * 0.85f + 0.15f;
 357              		.loc 2 70 13 view .LVU106
 358 006e D4ED027A 		vldr.32	s15, [r4, #8]
 359 0072 27EE277A 		vmul.f32	s14, s14, s15
 360              	.LVL28:
  71:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 361              		.loc 2 71 5 is_stmt 1 view .LVU107
  71:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 362              		.loc 2 71 45 is_stmt 0 view .LVU108
 363 0076 F0EE007A 		vmov.f32	s15, #2.0e+0
 364 007a 37EEC76A 		vsub.f32	s12, s15, s14
  71:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 365              		.loc 2 71 37 view .LVU109
 366 007e 26EE077A 		vmul.f32	s14, s12, s14
 367              	.LVL29:
  71:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 368              		.loc 2 71 13 view .LVU110
 369 0082 9FED336A 		vldr.32	s12, .L19+24
 370 0086 A7EE256A 		vfma.f32	s12, s14, s11
 371              	.LVL30:
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 372              		.loc 2 72 5 is_stmt 1 view .LVU111
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 373              		.loc 2 72 54 is_stmt 0 view .LVU112
 374 008a 37EEE87A 		vsub.f32	s14, s15, s17
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 375              		.loc 2 72 13 view .LVU113
 376 008e DFED317A 		vldr.32	s15, .L19+28
 377 0092 F0EE665A 		vmov.f32	s11, s13
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 378              		.loc 2 72 46 view .LVU114
 379 0096 27EE287A 		vmul.f32	s14, s14, s17
  72:dsp/resonator.cpp ****     float   q_loss_damping_rate = structure_ * (2.0f - structure_) * 0.1f;
 380              		.loc 2 72 13 view .LVU115
 381 009a 27EE277A 		vmul.f32	s14, s14, s15
 382              	.LVL31:
  73:dsp/resonator.cpp ****     for(int32_t i = 0; i < min(kMaxModes, resolution_); ++i)
 383              		.loc 2 73 5 is_stmt 1 view .LVU116
 384              		.loc 2 74 5 view .LVU117
 385              	.L13:
 386              	.LBB123:
 387              		.loc 2 74 26 discriminator 1 view .LVU118
 388              	.LBB103:
 389              	.LBI103:
 390              		.file 5 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/
   1:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 16


   8:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 17


  65:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 18


 122:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 19


 179:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 391              		.loc 5 230 5 discriminator 1 view .LVU119
 392              		.loc 5 230 5 is_stmt 0 discriminator 1 view .LVU120
 393              	.LBE103:
 394              		.loc 2 74 26 discriminator 1 view .LVU121
 395 009e 9342     		cmp	r3, r2
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 20


 396 00a0 46DA     		bge	.L7
 397              	.LBB104:
  75:dsp/resonator.cpp ****     {
  76:dsp/resonator.cpp ****         float partial_frequency = harmonic * stretch_factor;
 398              		.loc 2 76 9 is_stmt 1 view .LVU122
 399              		.loc 2 76 15 is_stmt 0 view .LVU123
 400 00a2 65EE267A 		vmul.f32	s15, s10, s13
 401              	.LVL32:
  77:dsp/resonator.cpp ****         if(partial_frequency >= 0.49f)
 402              		.loc 2 77 9 is_stmt 1 view .LVU124
 403 00a6 DFED2C4A 		vldr.32	s9, .L19+32
  78:dsp/resonator.cpp ****         {
  79:dsp/resonator.cpp ****             partial_frequency = 0.49f;
  80:dsp/resonator.cpp ****         }
  81:dsp/resonator.cpp ****         else
  82:dsp/resonator.cpp ****         {
  83:dsp/resonator.cpp ****             num_modes = i + 1;
  84:dsp/resonator.cpp ****         }
  85:dsp/resonator.cpp ****         f_[i].set_f_q<FREQUENCY_FAST>(partial_frequency,
 404              		.loc 2 85 38 is_stmt 0 view .LVU125
 405 00aa B0EE653A 		vmov.f32	s6, s11
 406              	.LBB105:
 407              	.LBB106:
 408              	.LBB107:
 409              	.LBB108:
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 410              		.loc 3 123 36 view .LVU126
 411 00ae 9FED2B4A 		vldr.32	s8, .L19+36
 412              	.LBE108:
 413              	.LBE107:
 414              	.LBE106:
 415              	.LBE105:
  83:dsp/resonator.cpp ****         }
 416              		.loc 2 83 23 view .LVU127
 417 00b2 0133     		adds	r3, r3, #1
 418              	.LVL33:
  86:dsp/resonator.cpp ****                                       1.0f + partial_frequency * q);
  87:dsp/resonator.cpp ****         stretch_factor += stiffness;
 419              		.loc 2 87 24 view .LVU128
 420 00b4 76EE886A 		vadd.f32	s13, s13, s16
 421              	.LVL34:
  77:dsp/resonator.cpp ****         {
 422              		.loc 2 77 9 view .LVU129
 423 00b8 F4EEE47A 		vcmpe.f32	s15, s9
 424 00bc 1434     		adds	r4, r4, #20
  88:dsp/resonator.cpp ****         if(stiffness < 0.0f)
  89:dsp/resonator.cpp ****         {
  90:dsp/resonator.cpp ****             // Make sure that the partials do not fold back into negative frequencies.
  91:dsp/resonator.cpp ****             stiffness *= 0.93f;
  92:dsp/resonator.cpp ****         }
  93:dsp/resonator.cpp ****         else
  94:dsp/resonator.cpp ****         {
  95:dsp/resonator.cpp ****             // This helps adding a few extra partials in the highest frequencies.
  96:dsp/resonator.cpp ****             stiffness *= 0.98f;
  97:dsp/resonator.cpp ****         }
  98:dsp/resonator.cpp ****         // This prevents the highest partials from decaying too fast.
  99:dsp/resonator.cpp ****         q_loss += q_loss_damping_rate * (1.0f - q_loss);
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 21


 100:dsp/resonator.cpp ****         harmonic += frequency_;
 425              		.loc 2 100 18 view .LVU130
 426 00be 35EE095A 		vadd.f32	s10, s10, s18
 427              	.LVL35:
  77:dsp/resonator.cpp ****         {
 428              		.loc 2 77 9 view .LVU131
 429 00c2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  88:dsp/resonator.cpp ****         if(stiffness < 0.0f)
 430              		.loc 2 88 9 view .LVU132
 431 00c6 B5EEC08A 		vcmpe.f32	s16, #0
  79:dsp/resonator.cpp ****         }
 432              		.loc 2 79 31 view .LVU133
 433 00ca A8BF     		it	ge
 434 00cc F0EE647A 		vmovge.f32	s15, s9
 435              	.LVL36:
  85:dsp/resonator.cpp ****                                       1.0f + partial_frequency * q);
 436              		.loc 2 85 9 is_stmt 1 view .LVU134
 437              	.LBB120:
 438              	.LBB117:
 439              	.LBB113:
 440              	.LBB109:
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 441              		.loc 3 123 36 is_stmt 0 view .LVU135
 442 00d0 DFED234A 		vldr.32	s9, .L19+40
 443              	.LBE109:
 444              	.LBE113:
 445              	.LBE117:
 446              	.LBE120:
  83:dsp/resonator.cpp ****         }
 447              		.loc 2 83 23 view .LVU136
 448 00d4 B8BF     		it	lt
 449 00d6 1846     		movlt	r0, r3
  88:dsp/resonator.cpp ****         {
 450              		.loc 2 88 9 view .LVU137
 451 00d8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 452              	.LBB121:
 453              	.LBB118:
 454              	.LBB114:
 455              	.LBB110:
 122:../../stmlib/dsp/filter.h ****       return f * (M_PI_F + f2 * (a + b * f2));
 456              		.loc 3 122 13 view .LVU138
 457 00dc 67EEA73A 		vmul.f32	s7, s15, s15
 458              	.LBE110:
 459              	.LBE114:
 460              	.LBE118:
 461              	.LBE121:
  85:dsp/resonator.cpp ****                                       1.0f + partial_frequency * q);
 462              		.loc 2 85 38 view .LVU139
 463 00e0 A0EE273A 		vfma.f32	s6, s0, s15
 464              	.LVL37:
 465              	.LBB122:
 466              	.LBI105:
 223:../../stmlib/dsp/filter.h ****     g_ = OnePole::tan<approximation>(f);
 467              		.loc 3 223 15 is_stmt 1 view .LVU140
 468              	.LBB119:
 469              	.LBB115:
 470              	.LBI107:
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 22


 107:../../stmlib/dsp/filter.h ****     if (approximation == FREQUENCY_EXACT) {
 471              		.loc 3 107 23 view .LVU141
 472              	.LBB111:
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 473              		.loc 3 123 36 is_stmt 0 view .LVU142
 474 00e4 A3EEA44A 		vfma.f32	s8, s7, s9
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 475              		.loc 3 123 26 view .LVU143
 476 00e8 DFED1E4A 		vldr.32	s9, .L19+44
 477 00ec E3EE844A 		vfma.f32	s9, s7, s8
 478              	.LBE111:
 479              	.LBE115:
 225:../../stmlib/dsp/filter.h ****     h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
 480              		.loc 3 225 15 view .LVU144
 481 00f0 85EE834A 		vdiv.f32	s8, s11, s6
 482              	.LBB116:
 483              	.LBB112:
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 484              		.loc 3 123 45 view .LVU145
 485 00f4 67EEA47A 		vmul.f32	s15, s15, s9
 486              	.LVL38:
 123:../../stmlib/dsp/filter.h ****     } else if (approximation == FREQUENCY_ACCURATE) {
 487              		.loc 3 123 45 view .LVU146
 488              	.LBE112:
 489              	.LBE116:
 490              		.loc 3 226 23 view .LVU147
 491 00f8 F0EE654A 		vmov.f32	s9, s11
 224:../../stmlib/dsp/filter.h ****     r_ = 1.0f / resonance;
 492              		.loc 3 224 8 view .LVU148
 493 00fc C4ED027A 		vstr.32	s15, [r4, #8]
 494              		.loc 3 226 23 view .LVU149
 495 0100 E4EE274A 		vfma.f32	s9, s8, s15
 225:../../stmlib/dsp/filter.h ****     h_ = 1.0f / (1.0f + r_ * g_ + g_ * g_);
 496              		.loc 3 225 8 view .LVU150
 497 0104 84ED034A 		vstr.32	s8, [r4, #12]
 498              		.loc 3 226 33 view .LVU151
 499 0108 E7EEA74A 		vfma.f32	s9, s15, s15
 500              		.loc 3 226 15 view .LVU152
 501 010c C5EEA47A 		vdiv.f32	s15, s11, s9
 502              		.loc 3 226 8 view .LVU153
 503 0110 C4ED047A 		vstr.32	s15, [r4, #16]
 504              	.LVL39:
 505              		.loc 3 226 8 view .LVU154
 506              	.LBE119:
 507              	.LBE122:
  87:dsp/resonator.cpp ****         if(stiffness < 0.0f)
 508              		.loc 2 87 9 is_stmt 1 view .LVU155
  88:dsp/resonator.cpp ****         {
 509              		.loc 2 88 9 view .LVU156
  91:dsp/resonator.cpp ****         }
 510              		.loc 2 91 13 view .LVU157
  91:dsp/resonator.cpp ****         }
 511              		.loc 2 91 23 is_stmt 0 view .LVU158
 512 0114 4CBF     		ite	mi
 513 0116 DFED147A 		vldrmi.32	s15, .L19+48
  96:dsp/resonator.cpp ****         }
 514              		.loc 2 96 13 is_stmt 1 view .LVU159
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 23


  96:dsp/resonator.cpp ****         }
 515              		.loc 2 96 23 is_stmt 0 view .LVU160
 516 011a DFED147A 		vldrpl.32	s15, .L19+52
 517 011e 28EE278A 		vmul.f32	s16, s16, s15
 518              	.LVL40:
  99:dsp/resonator.cpp ****         harmonic += frequency_;
 519              		.loc 2 99 9 is_stmt 1 view .LVU161
  99:dsp/resonator.cpp ****         harmonic += frequency_;
 520              		.loc 2 99 47 is_stmt 0 view .LVU162
 521 0122 75EEC67A 		vsub.f32	s15, s11, s12
  99:dsp/resonator.cpp ****         harmonic += frequency_;
 522              		.loc 2 99 16 view .LVU163
 523 0126 A7EE876A 		vfma.f32	s12, s15, s14
 524              	.LVL41:
 525              		.loc 2 100 9 is_stmt 1 view .LVU164
 101:dsp/resonator.cpp ****         q *= q_loss;
 526              		.loc 2 101 9 view .LVU165
 527              		.loc 2 101 11 is_stmt 0 view .LVU166
 528 012a 20EE060A 		vmul.f32	s0, s0, s12
 529              	.LVL42:
 530              		.loc 2 101 11 view .LVU167
 531              	.LBE104:
  74:dsp/resonator.cpp ****     {
 532              		.loc 2 74 5 is_stmt 1 view .LVU168
  74:dsp/resonator.cpp ****     {
 533              		.loc 2 74 5 is_stmt 0 view .LVU169
 534 012e B6E7     		b	.L13
 535              	.LVL43:
 536              	.L7:
  74:dsp/resonator.cpp ****     {
 537              		.loc 2 74 5 view .LVU170
 538              	.LBE123:
 102:dsp/resonator.cpp ****     }
 103:dsp/resonator.cpp **** 
 104:dsp/resonator.cpp ****     return num_modes;
 105:dsp/resonator.cpp **** }
 539              		.loc 2 105 1 view .LVU171
 540 0130 BDEC048B 		vldm	sp!, {d8-d9}
 541              		.cfi_restore 82
 542              		.cfi_restore 83
 543              		.cfi_restore 80
 544              		.cfi_restore 81
 545              		.cfi_def_cfa_offset 8
 546              	.LVL44:
 547              		.loc 2 105 1 view .LVU172
 548 0134 10BD     		pop	{r4, pc}
 549              	.L20:
 550 0136 00BF     		.align	2
 551              	.L19:
 552 0138 00008043 		.word	1132462080
 553 013c 00000000 		.word	_ZN5torus13lut_stiffnessE
 554 0140 00000000 		.word	_ZN5torus13lut_4_decadesE
 555 0144 0000FA43 		.word	1140457472
 556 0148 CDCC4C3E 		.word	1045220557
 557 014c 9A99593F 		.word	1062836634
 558 0150 9A99193E 		.word	1041865114
 559 0154 CDCCCC3D 		.word	1036831949
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 24


 560 0158 48E1FA3E 		.word	1056629064
 561 015c 8FBA2141 		.word	1092729487
 562 0160 49265F42 		.word	1113531977
 563 0164 DB0F4940 		.word	1078530011
 564 0168 7B146E3F 		.word	1064178811
 565 016c 48E17A3F 		.word	1065017672
 566              		.cfi_endproc
 567              	.LFE1528:
 569              		.section	.text._ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff,"axG",%progbits,_ZN6stmlib3Svf7Proce
 570              		.align	1
 571              		.weak	_ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 575              		.fpu fpv5-d16
 577              	_ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff:
 578              	.LVL45:
 579              	.LFB1535:
 227:../../stmlib/dsp/filter.h ****   }
 228:../../stmlib/dsp/filter.h ****   
 229:../../stmlib/dsp/filter.h ****   template<FilterMode mode>
 230:../../stmlib/dsp/filter.h ****   inline float Process(float in) {
 580              		.loc 3 230 16 is_stmt 1 view -0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 231:../../stmlib/dsp/filter.h ****     float hp, bp, lp;
 232:../../stmlib/dsp/filter.h ****     hp = (in - r_ * state_1_ - g_ * state_1_ - state_2_) * h_;
 585              		.loc 3 232 21 is_stmt 0 view .LVU174
 586 0000 90ED037A 		vldr.32	s14, [r0, #12]
 587              		.loc 3 232 14 view .LVU175
 588 0004 D0ED017A 		vldr.32	s15, [r0, #4]
 589              		.loc 3 232 32 view .LVU176
 590 0008 90ED006A 		vldr.32	s12, [r0]
 591              		.loc 3 232 14 view .LVU177
 592 000c A7EEC70A 		vfms.f32	s0, s15, s14
 593              	.LVL46:
 594              		.loc 3 232 48 view .LVU178
 595 0010 D0ED046A 		vldr.32	s13, [r0, #16]
 596              		.loc 3 232 8 view .LVU179
 597 0014 D0ED025A 		vldr.32	s11, [r0, #8]
 598              		.loc 3 232 30 view .LVU180
 599 0018 A7EE460A 		vfms.f32	s0, s14, s12
 600              		.loc 3 232 46 view .LVU181
 601 001c 70EE667A 		vsub.f32	s15, s0, s13
 602              		.loc 3 232 8 view .LVU182
 603 0020 67EEA57A 		vmul.f32	s15, s15, s11
 604              	.LVL47:
 233:../../stmlib/dsp/filter.h ****     bp = g_ * hp + state_1_;
 605              		.loc 3 233 8 view .LVU183
 606 0024 A6EE277A 		vfma.f32	s14, s12, s15
 607 0028 B0EE470A 		vmov.f32	s0, s14
 608              	.LVL48:
 234:../../stmlib/dsp/filter.h ****     state_1_ = g_ * hp + bp;
 609              		.loc 3 234 24 view .LVU184
 610 002c A6EE277A 		vfma.f32	s14, s12, s15
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 25


 235:../../stmlib/dsp/filter.h ****     lp = g_ * bp + state_2_;
 611              		.loc 3 235 8 view .LVU185
 612 0030 E6EE006A 		vfma.f32	s13, s12, s0
 613              	.LVL49:
 234:../../stmlib/dsp/filter.h ****     state_1_ = g_ * hp + bp;
 614              		.loc 3 234 14 view .LVU186
 615 0034 80ED037A 		vstr.32	s14, [r0, #12]
 236:../../stmlib/dsp/filter.h ****     state_2_ = g_ * bp + lp;
 616              		.loc 3 236 24 view .LVU187
 617 0038 E6EE006A 		vfma.f32	s13, s12, s0
 618              	.LVL50:
 619              		.loc 3 236 14 view .LVU188
 620 003c C0ED046A 		vstr.32	s13, [r0, #16]
 621              	.LVL51:
 237:../../stmlib/dsp/filter.h ****     
 238:../../stmlib/dsp/filter.h ****     if (mode == FILTER_MODE_LOW_PASS) {
 239:../../stmlib/dsp/filter.h ****       return lp;
 240:../../stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_BAND_PASS) {
 241:../../stmlib/dsp/filter.h ****       return bp;
 242:../../stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_BAND_PASS_NORMALIZED) {
 243:../../stmlib/dsp/filter.h ****       return bp * r_;
 244:../../stmlib/dsp/filter.h ****     } else if (mode == FILTER_MODE_HIGH_PASS) {
 245:../../stmlib/dsp/filter.h ****       return hp;
 246:../../stmlib/dsp/filter.h ****     }
 247:../../stmlib/dsp/filter.h ****   }
 622              		.loc 3 247 3 view .LVU189
 623 0040 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE1535:
 627              		.section	.text._ZN5torus9Resonator7ProcessEPKfPfS3_j,"ax",%progbits
 628              		.align	1
 629              		.global	_ZN5torus9Resonator7ProcessEPKfPfS3_j
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu fpv5-d16
 635              	_ZN5torus9Resonator7ProcessEPKfPfS3_j:
 636              	.LVL52:
 637              	.LFB1529:
 106:dsp/resonator.cpp **** 
 107:dsp/resonator.cpp **** void Resonator::Process(const float* in, float* out, float* aux, size_t size)
 108:dsp/resonator.cpp **** {
 638              		.loc 2 108 1 is_stmt 1 view -0
 639              		.cfi_startproc
 640              		@ args = 4, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 109:dsp/resonator.cpp ****     int32_t num_modes = ComputeFilters();
 642              		.loc 2 109 5 view .LVU191
 108:dsp/resonator.cpp ****     int32_t num_modes = ComputeFilters();
 643              		.loc 2 108 1 is_stmt 0 view .LVU192
 644 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 645              		.cfi_def_cfa_offset 40
 646              		.cfi_offset 3, -40
 647              		.cfi_offset 4, -36
 648              		.cfi_offset 5, -32
 649              		.cfi_offset 6, -28
 650              		.cfi_offset 7, -24
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 26


 651              		.cfi_offset 8, -20
 652              		.cfi_offset 9, -16
 653              		.cfi_offset 10, -12
 654              		.cfi_offset 11, -8
 655              		.cfi_offset 14, -4
 656 0004 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 657              		.cfi_def_cfa_offset 80
 658              		.cfi_offset 80, -80
 659              		.cfi_offset 81, -76
 660              		.cfi_offset 82, -72
 661              		.cfi_offset 83, -68
 662              		.cfi_offset 84, -64
 663              		.cfi_offset 85, -60
 664              		.cfi_offset 86, -56
 665              		.cfi_offset 87, -52
 666              		.cfi_offset 88, -48
 667              		.cfi_offset 89, -44
 108:dsp/resonator.cpp ****     int32_t num_modes = ComputeFilters();
 668              		.loc 2 108 1 view .LVU193
 669 0008 0446     		mov	r4, r0
 670 000a 149D     		ldr	r5, [sp, #80]
 671 000c 8846     		mov	r8, r1
 672 000e 1746     		mov	r7, r2
 673 0010 1E46     		mov	r6, r3
 674              		.loc 2 109 39 view .LVU194
 675 0012 FFF7FEFF 		bl	_ZN5torus9Resonator14ComputeFiltersEv
 676              	.LVL53:
 677              	.LBB151:
 678              	.LBB152:
 679              	.LBB153:
 680              		.file 6 "../../stmlib/dsp/parameter_interpolator.h"
   1:../../stmlib/dsp/parameter_interpolator.h **** // Copyright 2015 Emilie Gillet.
   2:../../stmlib/dsp/parameter_interpolator.h **** //
   3:../../stmlib/dsp/parameter_interpolator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:../../stmlib/dsp/parameter_interpolator.h **** //
   5:../../stmlib/dsp/parameter_interpolator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:../../stmlib/dsp/parameter_interpolator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:../../stmlib/dsp/parameter_interpolator.h **** // in the Software without restriction, including without limitation the rights
   8:../../stmlib/dsp/parameter_interpolator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:../../stmlib/dsp/parameter_interpolator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:../../stmlib/dsp/parameter_interpolator.h **** // furnished to do so, subject to the following conditions:
  11:../../stmlib/dsp/parameter_interpolator.h **** // 
  12:../../stmlib/dsp/parameter_interpolator.h **** // The above copyright notice and this permission notice shall be included in
  13:../../stmlib/dsp/parameter_interpolator.h **** // all copies or substantial portions of the Software.
  14:../../stmlib/dsp/parameter_interpolator.h **** // 
  15:../../stmlib/dsp/parameter_interpolator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../stmlib/dsp/parameter_interpolator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:../../stmlib/dsp/parameter_interpolator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:../../stmlib/dsp/parameter_interpolator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:../../stmlib/dsp/parameter_interpolator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:../../stmlib/dsp/parameter_interpolator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:../../stmlib/dsp/parameter_interpolator.h **** // THE SOFTWARE.
  22:../../stmlib/dsp/parameter_interpolator.h **** // 
  23:../../stmlib/dsp/parameter_interpolator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:../../stmlib/dsp/parameter_interpolator.h **** //
  25:../../stmlib/dsp/parameter_interpolator.h **** // -----------------------------------------------------------------------------
  26:../../stmlib/dsp/parameter_interpolator.h **** //
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 27


  27:../../stmlib/dsp/parameter_interpolator.h **** // Linear interpolation of parameters in rendering loops.
  28:../../stmlib/dsp/parameter_interpolator.h **** 
  29:../../stmlib/dsp/parameter_interpolator.h **** #ifndef STMLIB_DSP_PARAMETER_INTERPOLATOR_H_
  30:../../stmlib/dsp/parameter_interpolator.h **** #define STMLIB_DSP_PARAMETER_INTERPOLATOR_H_
  31:../../stmlib/dsp/parameter_interpolator.h **** 
  32:../../stmlib/dsp/parameter_interpolator.h **** #include "stmlib/stmlib.h"
  33:../../stmlib/dsp/parameter_interpolator.h **** 
  34:../../stmlib/dsp/parameter_interpolator.h **** namespace stmlib {
  35:../../stmlib/dsp/parameter_interpolator.h **** 
  36:../../stmlib/dsp/parameter_interpolator.h **** class ParameterInterpolator {
  37:../../stmlib/dsp/parameter_interpolator.h ****  public:
  38:../../stmlib/dsp/parameter_interpolator.h ****   ParameterInterpolator() { }
  39:../../stmlib/dsp/parameter_interpolator.h ****   ParameterInterpolator(float* state, float new_value, size_t size) {
  40:../../stmlib/dsp/parameter_interpolator.h ****     Init(state, new_value, size);
  41:../../stmlib/dsp/parameter_interpolator.h ****   }
  42:../../stmlib/dsp/parameter_interpolator.h **** 
  43:../../stmlib/dsp/parameter_interpolator.h ****   ParameterInterpolator(float* state, float new_value, float step) {
  44:../../stmlib/dsp/parameter_interpolator.h ****     state_ = state;
  45:../../stmlib/dsp/parameter_interpolator.h ****     value_ = *state;
  46:../../stmlib/dsp/parameter_interpolator.h ****     increment_ = (new_value - *state) * step;
  47:../../stmlib/dsp/parameter_interpolator.h ****   }
  48:../../stmlib/dsp/parameter_interpolator.h **** 
  49:../../stmlib/dsp/parameter_interpolator.h ****   ~ParameterInterpolator() {
  50:../../stmlib/dsp/parameter_interpolator.h ****     *state_ = value_;
  51:../../stmlib/dsp/parameter_interpolator.h ****   }
  52:../../stmlib/dsp/parameter_interpolator.h ****   
  53:../../stmlib/dsp/parameter_interpolator.h ****   inline void Init(float* state, float new_value, size_t size) {
  54:../../stmlib/dsp/parameter_interpolator.h ****     state_ = state;
  55:../../stmlib/dsp/parameter_interpolator.h ****     value_ = *state;
 681              		.loc 6 55 14 view .LVU195
 682 0016 94ED049A 		vldr.32	s18, [r4, #16]
  56:../../stmlib/dsp/parameter_interpolator.h ****     increment_ = (new_value - *state) / static_cast<float>(size);
 683              		.loc 6 56 41 view .LVU196
 684 001a 07EE105A 		vmov	s14, r5	@ int
 685              		.loc 6 56 29 view .LVU197
 686 001e D4ED037A 		vldr.32	s15, [r4, #12]
 687              	.LBE153:
 688              	.LBE152:
 689              	.LBE151:
 690              		.loc 2 109 39 view .LVU198
 691 0022 8246     		mov	r10, r0
 692              	.LVL54:
 110:dsp/resonator.cpp **** 
 111:dsp/resonator.cpp ****     ParameterInterpolator position(&previous_position_, position_, size);
 693              		.loc 2 111 5 is_stmt 1 view .LVU199
 694              	.LBB156:
 695              	.LBI151:
  39:../../stmlib/dsp/parameter_interpolator.h ****     Init(state, new_value, size);
 696              		.loc 6 39 3 view .LVU200
 697              	.LBE156:
  40:../../stmlib/dsp/parameter_interpolator.h ****   }
 698              		.loc 6 40 5 view .LVU201
 699              	.LBB157:
 700              	.LBB155:
 701              	.LBI152:
  53:../../stmlib/dsp/parameter_interpolator.h ****     state_ = state;
 702              		.loc 6 53 15 view .LVU202
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 28


 703              	.LBB154:
  54:../../stmlib/dsp/parameter_interpolator.h ****     value_ = *state;
 704              		.loc 6 54 5 view .LVU203
  55:../../stmlib/dsp/parameter_interpolator.h ****     increment_ = (new_value - *state) / static_cast<float>(size);
 705              		.loc 6 55 5 view .LVU204
 706              		.loc 6 56 5 view .LVU205
 707              		.loc 6 56 41 is_stmt 0 view .LVU206
 708 0024 B8EE477A 		vcvt.f32.u32	s14, s14
 709              		.loc 6 56 29 view .LVU207
 710 0028 77EEC97A 		vsub.f32	s15, s15, s18
 711              	.LVL55:
 712              		.loc 6 56 39 view .LVU208
 713 002c 87EE87CA 		vdiv.f32	s24, s15, s14
 714              	.LVL56:
 715              	.L30:
 716              		.loc 6 56 39 view .LVU209
 717              	.LBE154:
 718              	.LBE155:
 719              	.LBE157:
 112:dsp/resonator.cpp ****     while(size--)
 720              		.loc 2 112 5 is_stmt 1 view .LVU210
 721              		.loc 2 112 15 view .LVU211
 722              		.loc 2 112 15 is_stmt 0 view .LVU212
 723 0030 002D     		cmp	r5, #0
 724 0032 5BD0     		beq	.L23
 725              	.LBB158:
 113:dsp/resonator.cpp ****     {
 114:dsp/resonator.cpp ****         CosineOscillator amplitudes;
 726              		.loc 2 114 9 is_stmt 1 view .LVU213
 727              	.LVL57:
 728              	.LBB159:
 729              	.LBI159:
 730              		.file 7 "../../stmlib/dsp/cosine_oscillator.h"
   1:../../stmlib/dsp/cosine_oscillator.h **** // Copyright 2014 Emilie Gillet.
   2:../../stmlib/dsp/cosine_oscillator.h **** //
   3:../../stmlib/dsp/cosine_oscillator.h **** // Author: Emilie Gillet (emilie.o.gillet@gmail.com)
   4:../../stmlib/dsp/cosine_oscillator.h **** //
   5:../../stmlib/dsp/cosine_oscillator.h **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   6:../../stmlib/dsp/cosine_oscillator.h **** // of this software and associated documentation files (the "Software"), to deal
   7:../../stmlib/dsp/cosine_oscillator.h **** // in the Software without restriction, including without limitation the rights
   8:../../stmlib/dsp/cosine_oscillator.h **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:../../stmlib/dsp/cosine_oscillator.h **** // copies of the Software, and to permit persons to whom the Software is
  10:../../stmlib/dsp/cosine_oscillator.h **** // furnished to do so, subject to the following conditions:
  11:../../stmlib/dsp/cosine_oscillator.h **** // 
  12:../../stmlib/dsp/cosine_oscillator.h **** // The above copyright notice and this permission notice shall be included in
  13:../../stmlib/dsp/cosine_oscillator.h **** // all copies or substantial portions of the Software.
  14:../../stmlib/dsp/cosine_oscillator.h **** // 
  15:../../stmlib/dsp/cosine_oscillator.h **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../../stmlib/dsp/cosine_oscillator.h **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:../../stmlib/dsp/cosine_oscillator.h **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:../../stmlib/dsp/cosine_oscillator.h **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:../../stmlib/dsp/cosine_oscillator.h **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:../../stmlib/dsp/cosine_oscillator.h **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:../../stmlib/dsp/cosine_oscillator.h **** // THE SOFTWARE.
  22:../../stmlib/dsp/cosine_oscillator.h **** // 
  23:../../stmlib/dsp/cosine_oscillator.h **** // See http://creativecommons.org/licenses/MIT/ for more information.
  24:../../stmlib/dsp/cosine_oscillator.h **** //
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 29


  25:../../stmlib/dsp/cosine_oscillator.h **** // -----------------------------------------------------------------------------
  26:../../stmlib/dsp/cosine_oscillator.h **** //
  27:../../stmlib/dsp/cosine_oscillator.h **** // Cosine oscillator. Generates a cosine between 0.0 and 1.0 with minimal
  28:../../stmlib/dsp/cosine_oscillator.h **** // CPU use.
  29:../../stmlib/dsp/cosine_oscillator.h **** 
  30:../../stmlib/dsp/cosine_oscillator.h **** #ifndef STMLIB_DSP_COSINE_OSCILLATOR_H_
  31:../../stmlib/dsp/cosine_oscillator.h **** #define STMLIB_DSP_COSINE_OSCILLATOR_H_
  32:../../stmlib/dsp/cosine_oscillator.h **** 
  33:../../stmlib/dsp/cosine_oscillator.h **** #include "stmlib/stmlib.h"
  34:../../stmlib/dsp/cosine_oscillator.h **** 
  35:../../stmlib/dsp/cosine_oscillator.h **** #include <cmath>
  36:../../stmlib/dsp/cosine_oscillator.h **** 
  37:../../stmlib/dsp/cosine_oscillator.h **** namespace stmlib {
  38:../../stmlib/dsp/cosine_oscillator.h **** 
  39:../../stmlib/dsp/cosine_oscillator.h **** enum CosineOscillatorMode {
  40:../../stmlib/dsp/cosine_oscillator.h ****   COSINE_OSCILLATOR_APPROXIMATE,
  41:../../stmlib/dsp/cosine_oscillator.h ****   COSINE_OSCILLATOR_EXACT
  42:../../stmlib/dsp/cosine_oscillator.h **** };
  43:../../stmlib/dsp/cosine_oscillator.h **** 
  44:../../stmlib/dsp/cosine_oscillator.h **** class CosineOscillator {
  45:../../stmlib/dsp/cosine_oscillator.h ****  public:
  46:../../stmlib/dsp/cosine_oscillator.h ****   CosineOscillator() { }
 731              		.loc 7 46 3 view .LVU214
 732              		.loc 7 46 3 is_stmt 0 view .LVU215
 733              	.LBE159:
 115:dsp/resonator.cpp ****         amplitudes.Init<COSINE_OSCILLATOR_APPROXIMATE>(position.Next());
 734              		.loc 2 115 9 is_stmt 1 view .LVU216
 735              	.LBB160:
 736              	.LBI160:
  57:../../stmlib/dsp/parameter_interpolator.h ****   }
  58:../../stmlib/dsp/parameter_interpolator.h **** 
  59:../../stmlib/dsp/parameter_interpolator.h ****   inline float Next() {
 737              		.loc 6 59 16 view .LVU217
 738              	.LBB161:
  60:../../stmlib/dsp/parameter_interpolator.h ****     value_ += increment_;
 739              		.loc 6 60 5 view .LVU218
 740              		.loc 6 60 12 is_stmt 0 view .LVU219
 741 0034 39EE0C9A 		vadd.f32	s18, s18, s24
 742              	.LVL58:
  61:../../stmlib/dsp/parameter_interpolator.h ****     return value_;
 743              		.loc 6 61 5 is_stmt 1 view .LVU220
 744              		.loc 6 61 5 is_stmt 0 view .LVU221
 745              	.LBE161:
 746              	.LBE160:
 747              	.LBB162:
 748              	.LBI162:
  47:../../stmlib/dsp/cosine_oscillator.h ****   ~CosineOscillator() { }
  48:../../stmlib/dsp/cosine_oscillator.h **** 
  49:../../stmlib/dsp/cosine_oscillator.h ****   template<CosineOscillatorMode mode>
  50:../../stmlib/dsp/cosine_oscillator.h ****   inline void Init(float frequency) {
 749              		.loc 7 50 15 is_stmt 1 view .LVU222
 750              	.LBB163:
 751              	.LBI163:
  51:../../stmlib/dsp/cosine_oscillator.h ****     if (mode == COSINE_OSCILLATOR_APPROXIMATE) {
  52:../../stmlib/dsp/cosine_oscillator.h ****       InitApproximate(frequency);
  53:../../stmlib/dsp/cosine_oscillator.h ****     } else {
  54:../../stmlib/dsp/cosine_oscillator.h ****       iir_coefficient_ = 2.0f * cosf(2.0f * M_PI * frequency);
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 30


  55:../../stmlib/dsp/cosine_oscillator.h ****       initial_amplitude_ = iir_coefficient_ * 0.25f;
  56:../../stmlib/dsp/cosine_oscillator.h ****     }
  57:../../stmlib/dsp/cosine_oscillator.h ****     Start();
  58:../../stmlib/dsp/cosine_oscillator.h ****   }
  59:../../stmlib/dsp/cosine_oscillator.h ****   
  60:../../stmlib/dsp/cosine_oscillator.h ****   inline void InitApproximate(float frequency) {
 752              		.loc 7 60 15 view .LVU223
 753              	.LBB164:
  61:../../stmlib/dsp/cosine_oscillator.h ****     float sign = 16.0f;
 754              		.loc 7 61 5 view .LVU224
  62:../../stmlib/dsp/cosine_oscillator.h ****     frequency -= 0.25f;
 755              		.loc 7 62 5 view .LVU225
 756              		.loc 7 62 15 is_stmt 0 view .LVU226
 757 0038 F5EE008A 		vmov.f32	s17, #2.5e-1
 758 003c B6EE00AA 		vmov.f32	s20, #5.0e-1
 759 0040 39EE687A 		vsub.f32	s14, s18, s17
 760              	.LVL59:
  63:../../stmlib/dsp/cosine_oscillator.h ****     if (frequency < 0.0f) {
 761              		.loc 7 63 5 is_stmt 1 view .LVU227
 762 0044 B5EEC07A 		vcmpe.f32	s14, #0
 763 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 764 004c 3DD5     		bpl	.L34
  64:../../stmlib/dsp/cosine_oscillator.h ****       frequency = -frequency;
 765              		.loc 7 64 7 view .LVU228
 766              		.loc 7 64 17 is_stmt 0 view .LVU229
 767 004e B1EE477A 		vneg.f32	s14, s14
 768              	.LVL60:
 769              	.L36:
  61:../../stmlib/dsp/cosine_oscillator.h ****     frequency -= 0.25f;
 770              		.loc 7 61 11 view .LVU230
 771 0052 B3EE008A 		vmov.f32	s16, #1.6e+1
 772              	.L26:
 773              	.LVL61:
  65:../../stmlib/dsp/cosine_oscillator.h ****     } else {
  66:../../stmlib/dsp/cosine_oscillator.h ****       if (frequency > 0.5f) {
  67:../../stmlib/dsp/cosine_oscillator.h ****         frequency -= 0.5f;
  68:../../stmlib/dsp/cosine_oscillator.h ****       } else {
  69:../../stmlib/dsp/cosine_oscillator.h ****         sign = -16.0f;
  70:../../stmlib/dsp/cosine_oscillator.h ****       }
  71:../../stmlib/dsp/cosine_oscillator.h ****     }
  72:../../stmlib/dsp/cosine_oscillator.h ****     iir_coefficient_ = sign * frequency * (1.0f - 2.0f * frequency);
 774              		.loc 7 72 5 is_stmt 1 view .LVU231
 775              		.loc 7 72 29 is_stmt 0 view .LVU232
 776 0056 67EE087A 		vmul.f32	s15, s14, s16
 777              	.LBE164:
 778              	.LBE163:
 779              	.LBE162:
 116:dsp/resonator.cpp **** 
 117:dsp/resonator.cpp ****         float input = *in++ * 0.125f;
 780              		.loc 2 117 31 view .LVU233
 781 005a F8EC01AA 		vldmia.32	r8!, {s21}
 782              	.LVL62:
 783              	.LBB179:
 784              	.LBB170:
 785              	.LBB165:
 786              		.loc 7 72 49 view .LVU234
 787 005e F0EE006A 		vmov.f32	s13, #2.0e+0
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 31


 788              	.LBE165:
 789              	.LBE170:
 790              	.LBE179:
 118:dsp/resonator.cpp ****         float odd   = 0.0f;
 119:dsp/resonator.cpp ****         float even  = 0.0f;
 791              		.loc 2 119 15 view .LVU235
 792 0062 DFED259A 		vldr.32	s19, .L37
 793              	.LBB180:
 794              	.LBB171:
 795              	.LBB166:
 796              		.loc 7 72 49 view .LVU236
 797 0066 B7EE008A 		vmov.f32	s16, #1.0e+0
 798              	.LVL63:
 799              		.loc 7 72 49 view .LVU237
 800 006a 04F11C09 		add	r9, r4, #28
 801              	.LBE166:
 802              	.LBE171:
 803              	.LBB172:
 804              	.LBB173:
  73:../../stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
  74:../../stmlib/dsp/cosine_oscillator.h ****   }
  75:../../stmlib/dsp/cosine_oscillator.h ****   
  76:../../stmlib/dsp/cosine_oscillator.h ****   inline void Start() {
  77:../../stmlib/dsp/cosine_oscillator.h ****     y1_ = initial_amplitude_;
  78:../../stmlib/dsp/cosine_oscillator.h ****     y0_ = 0.5f;
 805              		.loc 7 78 9 view .LVU238
 806 006e B6EE00BA 		vmov.f32	s22, #5.0e-1
 807              	.LBE173:
 808              	.LBE172:
 809              	.LBE180:
 810              	.LBB181:
 120:dsp/resonator.cpp ****         amplitudes.Start();
 121:dsp/resonator.cpp ****         for(int32_t i = 0; i < num_modes;)
 811              		.loc 2 121 21 view .LVU239
 812 0072 4FF0000B 		mov	fp, #0
 813              	.LBE181:
 118:dsp/resonator.cpp ****         float even  = 0.0f;
 814              		.loc 2 118 15 view .LVU240
 815 0076 F0EE69BA 		vmov.f32	s23, s19
 816              	.LBB190:
 817              	.LBB175:
 818              	.LBB167:
  72:../../stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
 819              		.loc 7 72 49 view .LVU241
 820 007a A7EE668A 		vfms.f32	s16, s14, s13
  72:../../stmlib/dsp/cosine_oscillator.h ****     initial_amplitude_ = iir_coefficient_ * 0.25f;
 821              		.loc 7 72 41 view .LVU242
 822 007e 27EE888A 		vmul.f32	s16, s15, s16
  73:../../stmlib/dsp/cosine_oscillator.h ****   }
 823              		.loc 7 73 5 is_stmt 1 view .LVU243
 824              	.LBE167:
 825              	.LBE175:
 826              	.LBE190:
 117:dsp/resonator.cpp ****         float odd   = 0.0f;
 827              		.loc 2 117 31 is_stmt 0 view .LVU244
 828 0082 F4EE007A 		vmov.f32	s15, #1.25e-1
 829              	.LBB191:
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 32


 830              	.LBB176:
 831              	.LBB168:
  73:../../stmlib/dsp/cosine_oscillator.h ****   }
 832              		.loc 7 73 43 view .LVU245
 833 0086 68EE288A 		vmul.f32	s17, s16, s17
 834              	.LVL64:
  73:../../stmlib/dsp/cosine_oscillator.h ****   }
 835              		.loc 7 73 43 view .LVU246
 836              	.LBE168:
 837              	.LBE176:
 838              	.LBB177:
 839              	.LBI172:
  76:../../stmlib/dsp/cosine_oscillator.h ****     y1_ = initial_amplitude_;
 840              		.loc 7 76 15 is_stmt 1 view .LVU247
 841              	.LBB174:
  77:../../stmlib/dsp/cosine_oscillator.h ****     y0_ = 0.5f;
 842              		.loc 7 77 5 view .LVU248
 843              		.loc 7 78 5 view .LVU249
 844              		.loc 7 78 5 is_stmt 0 view .LVU250
 845              	.LBE174:
 846              	.LBE177:
 847              	.LBE191:
 117:dsp/resonator.cpp ****         float odd   = 0.0f;
 848              		.loc 2 117 9 is_stmt 1 view .LVU251
 117:dsp/resonator.cpp ****         float odd   = 0.0f;
 849              		.loc 2 117 31 is_stmt 0 view .LVU252
 850 008a 6AEEA7AA 		vmul.f32	s21, s21, s15
 851              	.LVL65:
 118:dsp/resonator.cpp ****         float even  = 0.0f;
 852              		.loc 2 118 9 is_stmt 1 view .LVU253
 119:dsp/resonator.cpp ****         amplitudes.Start();
 853              		.loc 2 119 9 view .LVU254
 120:dsp/resonator.cpp ****         for(int32_t i = 0; i < num_modes;)
 854              		.loc 2 120 9 view .LVU255
 120:dsp/resonator.cpp ****         for(int32_t i = 0; i < num_modes;)
 855              		.loc 2 120 9 is_stmt 0 view .LVU256
 856              	.LBE158:
  77:../../stmlib/dsp/cosine_oscillator.h ****     y0_ = 0.5f;
 857              		.loc 7 77 5 is_stmt 1 view .LVU257
 858              		.loc 7 78 5 view .LVU258
 859              	.LBB195:
 860              		.loc 2 121 9 view .LVU259
 861              	.L29:
 862              	.LBB192:
 863              		.loc 2 121 30 discriminator 1 view .LVU260
 864 008e D345     		cmp	fp, r10
 865 0090 26DA     		bge	.L28
 122:dsp/resonator.cpp ****         {
 123:dsp/resonator.cpp ****             odd += amplitudes.Next()
 866              		.loc 2 123 13 view .LVU261
 867              	.LVL66:
 868              	.LBB182:
 869              	.LBI182:
  79:../../stmlib/dsp/cosine_oscillator.h ****   }
  80:../../stmlib/dsp/cosine_oscillator.h ****   
  81:../../stmlib/dsp/cosine_oscillator.h ****   inline float value() const {
  82:../../stmlib/dsp/cosine_oscillator.h ****     return y1_ + 0.5f;
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 33


  83:../../stmlib/dsp/cosine_oscillator.h ****   }
  84:../../stmlib/dsp/cosine_oscillator.h **** 
  85:../../stmlib/dsp/cosine_oscillator.h ****   inline float Next() {
 870              		.loc 7 85 16 view .LVU262
 871              	.LBB183:
  86:../../stmlib/dsp/cosine_oscillator.h ****     float temp = y0_;
 872              		.loc 7 86 5 view .LVU263
  87:../../stmlib/dsp/cosine_oscillator.h ****     y0_ = iir_coefficient_ * y0_ - y1_;
 873              		.loc 7 87 5 view .LVU264
 874              		.loc 7 87 34 is_stmt 0 view .LVU265
 875 0092 D8EE0B8A 		vfnms.f32	s17, s16, s22
 876              	.LVL67:
  88:../../stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 877              		.loc 7 88 5 is_stmt 1 view .LVU266
  89:../../stmlib/dsp/cosine_oscillator.h ****     return temp + 0.5f;
 878              		.loc 7 89 5 view .LVU267
 879              		.loc 7 89 5 is_stmt 0 view .LVU268
 880              	.LBE183:
 881              	.LBE182:
 124:dsp/resonator.cpp ****                    * f_[i++].Process<FILTER_MODE_BAND_PASS>(input);
 882              		.loc 2 124 60 view .LVU269
 883 0096 4846     		mov	r0, r9
 884 0098 B0EE6A0A 		vmov.f32	s0, s21
 125:dsp/resonator.cpp ****             even += amplitudes.Next()
 126:dsp/resonator.cpp ****                     * f_[i++].Process<FILTER_MODE_BAND_PASS>(input);
 885              		.loc 2 126 27 view .LVU270
 886 009c 0BF1020B 		add	fp, fp, #2
 887              	.LVL68:
 124:dsp/resonator.cpp ****                    * f_[i++].Process<FILTER_MODE_BAND_PASS>(input);
 888              		.loc 2 124 60 view .LVU271
 889 00a0 FFF7FEFF 		bl	_ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff
 890              	.LVL69:
 891              	.LBB185:
 892              	.LBB184:
 893              		.loc 7 89 19 view .LVU272
 894 00a4 7BEE0A7A 		vadd.f32	s15, s22, s20
 895              	.LBE184:
 896              	.LBE185:
 897              		.loc 2 126 61 view .LVU273
 898 00a8 09F11400 		add	r0, r9, #20
 899 00ac 09F12809 		add	r9, r9, #40
 123:dsp/resonator.cpp ****                    * f_[i++].Process<FILTER_MODE_BAND_PASS>(input);
 900              		.loc 2 123 17 view .LVU274
 901 00b0 E0EE27BA 		vfma.f32	s23, s0, s15
 902              	.LVL70:
 125:dsp/resonator.cpp ****             even += amplitudes.Next()
 903              		.loc 2 125 13 is_stmt 1 view .LVU275
 904              	.LBB186:
 905              	.LBI186:
  85:../../stmlib/dsp/cosine_oscillator.h ****     float temp = y0_;
 906              		.loc 7 85 16 view .LVU276
 907              	.LBB187:
  86:../../stmlib/dsp/cosine_oscillator.h ****     y0_ = iir_coefficient_ * y0_ - y1_;
 908              		.loc 7 86 5 view .LVU277
  87:../../stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 909              		.loc 7 87 5 view .LVU278
 910              	.LBE187:
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 34


 911              	.LBE186:
 912              		.loc 2 126 61 is_stmt 0 view .LVU279
 913 00b4 B0EE6A0A 		vmov.f32	s0, s21
 914 00b8 FFF7FEFF 		bl	_ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff
 915              	.LVL71:
 916              	.LBB189:
 917              	.LBB188:
 918              		.loc 7 89 19 view .LVU280
 919 00bc 78EE8A7A 		vadd.f32	s15, s17, s20
  87:../../stmlib/dsp/cosine_oscillator.h ****     y1_ = temp;
 920              		.loc 7 87 34 view .LVU281
 921 00c0 98EE28BA 		vfnms.f32	s22, s16, s17
 922              	.LVL72:
  88:../../stmlib/dsp/cosine_oscillator.h ****     return temp + 0.5f;
 923              		.loc 7 88 5 is_stmt 1 view .LVU282
 924              		.loc 7 89 5 view .LVU283
 925              		.loc 7 89 5 is_stmt 0 view .LVU284
 926              	.LBE188:
 927              	.LBE189:
 125:dsp/resonator.cpp ****                     * f_[i++].Process<FILTER_MODE_BAND_PASS>(input);
 928              		.loc 2 125 18 view .LVU285
 929 00c4 E0EE279A 		vfma.f32	s19, s0, s15
 930              	.LVL73:
 121:dsp/resonator.cpp ****         {
 931              		.loc 2 121 9 view .LVU286
 932 00c8 E1E7     		b	.L29
 933              	.LVL74:
 934              	.L34:
 121:dsp/resonator.cpp ****         {
 935              		.loc 2 121 9 view .LVU287
 936              	.LBE192:
 937              	.LBB193:
 938              	.LBB178:
 939              	.LBB169:
  66:../../stmlib/dsp/cosine_oscillator.h ****         frequency -= 0.5f;
 940              		.loc 7 66 7 is_stmt 1 view .LVU288
 941 00ca B4EECA7A 		vcmpe.f32	s14, s20
 942 00ce F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 943 00d2 02DD     		ble	.L35
  67:../../stmlib/dsp/cosine_oscillator.h ****       } else {
 944              		.loc 7 67 9 view .LVU289
  67:../../stmlib/dsp/cosine_oscillator.h ****       } else {
 945              		.loc 7 67 19 is_stmt 0 view .LVU290
 946 00d4 37EE4A7A 		vsub.f32	s14, s14, s20
 947              	.LVL75:
  67:../../stmlib/dsp/cosine_oscillator.h ****       } else {
 948              		.loc 7 67 19 view .LVU291
 949 00d8 BBE7     		b	.L36
 950              	.LVL76:
 951              	.L35:
  69:../../stmlib/dsp/cosine_oscillator.h ****       }
 952              		.loc 7 69 14 view .LVU292
 953 00da BBEE008A 		vmov.f32	s16, #-1.6e+1
 954 00de BAE7     		b	.L26
 955              	.LVL77:
 956              	.L28:
  69:../../stmlib/dsp/cosine_oscillator.h ****       }
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 35


 957              		.loc 7 69 14 view .LVU293
 958              	.LBE169:
 959              	.LBE178:
 960              	.LBE193:
 127:dsp/resonator.cpp ****         }
 128:dsp/resonator.cpp ****         *out++ = odd;
 961              		.loc 2 128 9 is_stmt 1 view .LVU294
 962              		.loc 2 128 16 is_stmt 0 view .LVU295
 963 00e0 E7EC01BA 		vstmia.32	r7!, {s23}
 964              	.LVL78:
 129:dsp/resonator.cpp ****         *aux++ = even;
 965              		.loc 2 129 9 is_stmt 1 view .LVU296
 966              		.loc 2 129 9 is_stmt 0 view .LVU297
 967 00e4 013D     		subs	r5, r5, #1
 968              	.LVL79:
 969              		.loc 2 129 16 view .LVU298
 970 00e6 E6EC019A 		vstmia.32	r6!, {s19}
 971              	.LVL80:
 972              	.LBB194:
 973              	.LBI194:
  47:../../stmlib/dsp/cosine_oscillator.h **** 
 974              		.loc 7 47 3 is_stmt 1 view .LVU299
  47:../../stmlib/dsp/cosine_oscillator.h **** 
 975              		.loc 7 47 3 is_stmt 0 view .LVU300
 976              	.LBE194:
 977              	.LBE195:
 112:dsp/resonator.cpp ****     {
 978              		.loc 2 112 5 view .LVU301
 979 00ea A1E7     		b	.L30
 980              	.LVL81:
 981              	.L23:
 982              	.LBB196:
 983              	.LBI196:
  49:../../stmlib/dsp/parameter_interpolator.h ****     *state_ = value_;
 984              		.loc 6 49 3 is_stmt 1 view .LVU302
 985              	.LBB197:
  50:../../stmlib/dsp/parameter_interpolator.h ****   }
 986              		.loc 6 50 5 view .LVU303
  50:../../stmlib/dsp/parameter_interpolator.h ****   }
 987              		.loc 6 50 13 is_stmt 0 view .LVU304
 988 00ec 84ED049A 		vstr.32	s18, [r4, #16]
 989              	.LVL82:
  50:../../stmlib/dsp/parameter_interpolator.h ****   }
 990              		.loc 6 50 13 view .LVU305
 991              	.LBE197:
 992              	.LBE196:
 130:dsp/resonator.cpp ****     }
 131:dsp/resonator.cpp **** }
 993              		.loc 2 131 1 view .LVU306
 994 00f0 BDEC0A8B 		vldm	sp!, {d8-d12}
 995              		.cfi_restore 88
 996              		.cfi_restore 89
 997              		.cfi_restore 86
 998              		.cfi_restore 87
 999              		.cfi_restore 84
 1000              		.cfi_restore 85
 1001              		.cfi_restore 82
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 36


 1002              		.cfi_restore 83
 1003              		.cfi_restore 80
 1004              		.cfi_restore 81
 1005              		.cfi_def_cfa_offset 40
 1006              	.LVL83:
 1007              		.loc 2 131 1 view .LVU307
 1008 00f4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1009              	.LVL84:
 1010              	.L38:
 1011              		.loc 2 131 1 view .LVU308
 1012              		.align	2
 1013              	.L37:
 1014 00f8 00000000 		.word	0
 1015              		.cfi_endproc
 1016              	.LFE1529:
 1018              		.text
 1019              	.Letext0:
 1020              		.file 8 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 1021              		.file 9 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 1022              		.file 10 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/lib/gcc/arm-none-eabi/10.3.1/inc
 1023              		.file 11 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1024              		.file 12 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1025              		.file 13 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1026              		.file 14 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1027              		.file 15 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1028              		.file 16 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1029              		.file 17 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1030              		.file 18 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1031              		.file 19 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1032              		.file 20 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1033              		.file 21 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/math.h"
 1034              		.file 22 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/stdlib.h"
 1035              		.file 23 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/c++/10.3.1
 1036              		.file 24 "../../stmlib/stmlib.h"
 1037              		.file 25 "./dsp/dsp.h"
 1038              		.file 26 "./resources.h"
 1039              		.file 27 "<built-in>"
ARM GAS  /var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 resonator.cpp
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:17     .text._ZN6stmlib11InterpolateEPKfff:0000000000000000 $t
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:25     .text._ZN6stmlib11InterpolateEPKfff:0000000000000000 _ZN6stmlib11InterpolateEPKfff
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:71     .text._ZN5torus9Resonator4InitEv:0000000000000000 $t
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:78     .text._ZN5torus9Resonator4InitEv:0000000000000000 _ZN5torus9Resonator4InitEv
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:248    .text._ZN5torus9Resonator4InitEv:0000000000000040 $d
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:258    .text._ZN5torus9Resonator14ComputeFiltersEv:0000000000000000 $t
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:265    .text._ZN5torus9Resonator14ComputeFiltersEv:0000000000000000 _ZN5torus9Resonator14ComputeFiltersEv
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:552    .text._ZN5torus9Resonator14ComputeFiltersEv:0000000000000138 $d
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:570    .text._ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff:0000000000000000 $t
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:577    .text._ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff:0000000000000000 _ZN6stmlib3Svf7ProcessILNS_10FilterModeE1EEEff
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:628    .text._ZN5torus9Resonator7ProcessEPKfPfS3_j:0000000000000000 $t
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:635    .text._ZN5torus9Resonator7ProcessEPKfPfS3_j:0000000000000000 _ZN5torus9Resonator7ProcessEPKfPfS3_j
/var/folders/hl/qgbwny5j0fd895c2c41bk3tw0000gp/T//ccrhw52M.s:1014   .text._ZN5torus9Resonator7ProcessEPKfPfS3_j:00000000000000f8 $d

UNDEFINED SYMBOLS
_ZN5torus13lut_stiffnessE
_ZN5torus13lut_4_decadesE
